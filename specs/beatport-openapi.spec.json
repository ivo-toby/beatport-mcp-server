{
  "openapi": "3.0.3",
  "info": {
    "title": "Beatport API",
    "version": "v4",
    "description": "Beatport API documentation",
    "termsOfService": "https://support.beatport.com/hc/en-us/articles/4414997837716-Terms-and-Conditions#api",
    "contact": {
      "email": "engineering@beatport.com"
    },
    "license": {
      "name": "Copyright Beatport"
    }
  },
  "paths": {
    "/v4/auxiliary/artist-types/": {
      "get": {
        "operationId": "auxiliary_artist_types_list",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["auxiliary"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedArtistTypeListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/auxiliary/artist-types/{id}/": {
      "get": {
        "operationId": "auxiliary_artist_types_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["auxiliary"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArtistTypeDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/auxiliary/artist-types/facets/": {
      "get": {
        "operationId": "auxiliary_artist_types_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["auxiliary"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArtistType"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/auxiliary/commercial-model-types/": {
      "get": {
        "operationId": "auxiliary_commercial_model_types_list",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["auxiliary"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCommercialModelTypeListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/auxiliary/commercial-model-types/facets/": {
      "get": {
        "operationId": "auxiliary_commercial_model_types_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["auxiliary"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommercialModelType"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/artists/": {
      "get": {
        "operationId": "catalog_artists_list",
        "description": "A Mixin for adding the ability in a view top items by resource.",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter by exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by enabled.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by artist id exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter name by case-insensitive text containment."
          },
          {
            "in": "query",
            "name": "name_exact",
            "schema": {
              "type": "string"
            },
            "description": "Filter by name exact match."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "updated",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter by exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedArtistListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/artists/{id}/": {
      "get": {
        "operationId": "catalog_artists_retrieve",
        "description": "A Mixin for adding the ability in a view top items by resource.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArtistDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/artists/{id}/images/": {
      "get": {
        "operationId": "catalog_artists_images_retrieve",
        "description": "Return/create this artist's images.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Artist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/artists/{id}/top/{num}/": {
      "get": {
        "operationId": "catalog_artists_top_retrieve",
        "description": "Return top <N> tracks for a artist by most popular rank, where N limited between 1 and 100.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "num",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Artist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/artists/{id}/tracks/": {
      "get": {
        "operationId": "catalog_artists_tracks_retrieve",
        "description": "Return this artist's tracks",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Artist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/artists/facets/": {
      "get": {
        "operationId": "catalog_artists_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Artist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/charts/": {
      "get": {
        "operationId": "catalog_charts_list",
        "parameters": [
          {
            "in": "query",
            "name": "add_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter by date added.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "curated_playlist_genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on genre ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "dj_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by the exact dj profile id.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "dj_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive DJ name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "dj_slug",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive DJ slug containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on genre ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact chart ID.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_approved",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by approved boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_curated_playlist",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by is curated playlist boolean match."
          },
          {
            "in": "query",
            "name": "is_indexed",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by indexed boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_published",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by published boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "publish_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter by date published.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "register_ip_address",
            "schema": {
              "type": "integer",
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "format": "int64"
            },
            "description": "Filter by exact registration IP address match."
          },
          {
            "in": "query",
            "name": "sub_genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on sub genre ID.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sub_genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive sub_genre name\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "track_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on track_id.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter by date added.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact user ID.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive username containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChartListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/charts/{id}/": {
      "get": {
        "operationId": "catalog_charts_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/charts/{id}/images/": {
      "get": {
        "operationId": "catalog_charts_images_retrieve",
        "description": "Return/create this chart's images.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/charts/{id}/tracks/": {
      "get": {
        "operationId": "catalog_charts_tracks_retrieve",
        "description": "Return this chart's tracks, updating if necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/charts/{id}/tracks/ids/": {
      "get": {
        "operationId": "catalog_charts_tracks_ids_retrieve",
        "description": "Return this chart's track IDs.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/charts/facets/": {
      "get": {
        "operationId": "catalog_charts_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/charts/genre-overview/": {
      "get": {
        "operationId": "catalog_charts_genre_overview_retrieve",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartGenreOverview"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/genres/": {
      "get": {
        "operationId": "catalog_genres_list",
        "description": "A Mixin for adding the ability in a view top items by resource.",
        "parameters": [
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "description": "Filter by exact genre name match."
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-id", "-status", "id", "status"]
              }
            },
            "description": "Ordering\n\n* `id` - Genre ID\n* `-id` - Genre ID (descending)\n* `status` - Genre Status\n* `-status` - Genre Status (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGenreListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/genres/{id}/": {
      "get": {
        "operationId": "catalog_genres_retrieve",
        "description": "A Mixin for adding the ability in a view top items by resource.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenreDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/genres/{id}/sub-genres/": {
      "get": {
        "operationId": "catalog_genres_sub_genres_retrieve",
        "description": "Return this genre's sub-genres",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Genre"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/genres/{id}/top/{num}/": {
      "get": {
        "operationId": "catalog_genres_top_retrieve",
        "description": "Return top <N> tracks for a genre by most popular rank, where N limited between 1 and 100.\n\nTakes optional argument `type=release` for `releases`.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "num",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Genre"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/genres/{id}/tracks/": {
      "get": {
        "operationId": "catalog_genres_tracks_retrieve",
        "description": "Return this genre's tracks",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Genre"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/genres/facets/": {
      "get": {
        "operationId": "catalog_genres_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Genre"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/labels/": {
      "get": {
        "operationId": "catalog_labels_list",
        "description": "A Mixin for adding the ability in a view top items by resource.",
        "parameters": [
          {
            "in": "query",
            "name": "created",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "default_pre_order_weeks",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by Default Pre-Order Weeks exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "hype_active",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on active enrollment in Hype.\n\n* `true` - True\n* `false` - False"
          },
          {
            "in": "query",
            "name": "hype_eligible",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on Hype eligibility.\n\n* `true` - True\n* `false` - False"
          },
          {
            "in": "query",
            "name": "hype_trial_end_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "hype_trial_start_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_available_for_hype",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by Is Available for Hype exact match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_available_for_pre_order",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by Is Available for Pre-Order exact match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_available_for_streaming",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by Is Available for Streaming exact match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "label_manager",
            "schema": {
              "type": "string"
            },
            "description": "Filter by case-insensitive Label Manager name containment."
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name_exact",
            "schema": {
              "type": "string"
            },
            "description": "Filter by exact label name."
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "supplier_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact supplier ID.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive supplier name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "updated",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLabelListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/labels/{id}/": {
      "get": {
        "operationId": "catalog_labels_retrieve",
        "description": "A Mixin for adding the ability in a view top items by resource.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/labels/{id}/download/": {
      "get": {
        "operationId": "catalog_labels_download_retrieve",
        "description": "A Mixin for adding the ability in a view top items by resource.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelCSVExport"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/labels/{id}/images/": {
      "get": {
        "operationId": "catalog_labels_images_retrieve",
        "description": "Return/create this label's images.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/labels/{id}/releases/": {
      "get": {
        "operationId": "catalog_labels_releases_retrieve",
        "description": "Return this label's releases",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/labels/{id}/top/{num}/": {
      "get": {
        "operationId": "catalog_labels_top_retrieve",
        "description": "Return top <N> tracks for a label by most popular rank, where N limited between 1 and 100.\n\nTakes optional argument `type=release` for `releases`.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "num",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/labels/facets/": {
      "get": {
        "operationId": "catalog_labels_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/playlists/": {
      "get": {
        "operationId": "catalog_playlists_list",
        "description": "Return list of Playlists.\n\nFor LINK users it checks that playlists are public and published\nand will further filter according to subscription plan\nFor CMS users it will return all  playlists and use the catalog fields\nNote that this is virtually identitical to the MyPlaylistsViewSet list method,\nexcept the queryset does not filter by the requesting user id.",
        "parameters": [
          {
            "in": "query",
            "name": "artist_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on the artist name\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter on date range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on Genre ID\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on Genre name\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_public",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on Playlist name\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-create_date",
                  "-name",
                  "-update_date",
                  "create_date",
                  "name",
                  "update_date"
                ]
              }
            },
            "description": "Order by a field. Choices: created_date, name, updated_date.             Use -created_datefor descending order\n\n* `create_date` - Create date\n* `-create_date` - Create date (descending)\n* `update_date` - Update date\n* `-update_date` - Update date (descending)\n* `name` - Name\n* `-name` - Name (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "playlist_status",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "playlist_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on Playlist name\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "playlist_type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on Playlist ID\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "updated_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter on date range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact user ID.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive username containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlaylistProxyList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/playlists/{id}/": {
      "get": {
        "operationId": "catalog_playlists_retrieve",
        "description": "Return a Playlist.\nCMS users\nLoads any playlist regardless of ownership and will use the catalog fields\nLINK users\nRestrict a private playlist that is not owned by requesting user.\n\nNote that this is virtually identitical to the MyPlaylistsViewSet list method,\nexcept the queryset does not filter by the requesting user id.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist_metadata_response"
                }
              }
            },
            "description": "200"
          }
        }
      }
    },
    "/v4/catalog/playlists/{id}/chart-mapping/": {
      "get": {
        "operationId": "catalog_playlists_chart_mapping_retrieve",
        "description": "Get the chart mapping value if any",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/playlists/{id}/partners/": {
      "get": {
        "operationId": "catalog_playlists_partners_retrieve",
        "description": "Get the playlist Link! partners if any",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/playlists/{playlists_pk}/tracks/": {
      "get": {
        "operationId": "catalog_playlists_tracks_list",
        "description": "Return a list of `PlaylistTrack` objects for the given playlist.\n\nThe `PlaylistTrack` has a computed value \"tombstoned\" which indicates if the track was\nadded to a LINK playlist but is no longer available for LINK. The track remains in the\nplaylist but isn't streamable.\n\nNote that this is virtually identitical to the MyPlaylistTracksViewSet list method,\nexcept the queryset does not filter by the requesting user id.",
        "parameters": [
          {
            "in": "query",
            "name": "artist_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on artist ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "artist_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive artist name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "available_worldwide",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on available worldwide boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "bpm",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range."
          },
          {
            "in": "query",
            "name": "catalog_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive catalog_number exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "change_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "chord_type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact key ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "current_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on current_status ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "encode_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive encode status exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "encoded_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive_period",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive exclusive period exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "free_download_end_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "free_download_start_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "genre_enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on genre ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "guid",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "filter on exact guid match\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_available_for_streaming",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on streaming available boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_classic",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_classic boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_hype",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_hype boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "isrc",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on exact ISRC match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact key ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "\n            Filter key. Denote sharp as #, flat as b with minor/major separated by a space.\n            Available Keys:\n                \"A Minor\"\n                \"A Major\"\n                \"Ab Minor\"\n                \"Ab Major\"\n                \"A# Minor\"\n                \"A# Major\"\n                \"B Minor\"\n                \"B Major\"\n                \"Bb Minor\"\n                \"Bb Major\"\n                \"C Minor\"\n                \"C Major\"\n                \"C# Minor\"\n                \"C# Major\"\n                \"D Minor\"\n                \"D Major\"\n                \"Db Minor\"\n                \"Db Major\"\n                \"D# Minor\"\n                \"D# Major\"\n                \"E Minor\"\n                \"E Major\"\n                \"Eb Minor\"\n                \"Eb Major\"\n                \"F Minor\"\n                \"F Major\"\n                \"F# Minor\"\n                \"F# Major\"\n                \"G Minor\"\n                \"G Major\"\n                \"Gb Minor\"\n                \"Gb Major\"\n                \"G# Minor\"\n                \"G# Major\"\n            \nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "label_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on label ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_manager",
            "schema": {
              "type": "string"
            },
            "description": "Filter by case-insensitive Label Manager name containment."
          },
          {
            "in": "query",
            "name": "label_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive label name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_name_exact",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive label name exact.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "mix_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive remix name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "new_release_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-genre",
                  "-label",
                  "-name",
                  "-publish_date",
                  "-release_date",
                  "-release_id",
                  "genre",
                  "label",
                  "name",
                  "publish_date",
                  "release_date",
                  "release_id"
                ]
              }
            },
            "description": "Order by a field. Choices: publish_date, genre, label, name.             Use -genre for descending order\n\n* `publish_date` - Publish date\n* `-publish_date` - Publish date (descending)\n* `release_id` - Release id\n* `-release_id` - Release id (descending)\n* `release_date` - Release date\n* `-release_date` - Release date (descending)\n* `genre` - Genre\n* `-genre` - Genre (descending)\n* `label` - Label\n* `-label` - Label (descending)\n* `name` - Name\n* `-name` - Name (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "playlists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pre_order_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on publish_status exact match\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "release_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact release ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "release_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive release name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sale_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive sale type exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sub_genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive sub-genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "track_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact track_number match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on track type. Either Release, Album or Mix\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on track release type id\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "was_ever_exclusive",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on was_ever_exclusive boolean match.\n\n* `false` - False\n* `true` - True"
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlaylistTrackList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/playlists/{playlists_pk}/tracks/facets/": {
      "get": {
        "operationId": "catalog_playlists_tracks_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "parameters": [
          {
            "in": "path",
            "name": "playlists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistTrack"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/playlists/{playlists_pk}/tracks/ids/": {
      "get": {
        "operationId": "catalog_playlists_tracks_ids_retrieve",
        "description": "Return a list of `PlaylistTrack` IDs for the given playlist.",
        "parameters": [
          {
            "in": "path",
            "name": "playlists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistTrack"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/playlists/facets/": {
      "get": {
        "operationId": "catalog_playlists_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/": {
      "get": {
        "operationId": "catalog_releases_list",
        "description": "A ViewSet Mixin that adds routes for recommendations given one or\nmany items as a reference. Recommendations only apply to items whose\nitem_type_id is present in `publish_beatbot`.`source_item_type_id`.",
        "parameters": [
          {
            "in": "query",
            "name": "artist_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact artist ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "artist_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive artist name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "catalog_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive catalog number exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter by exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "current_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on current_status ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "encoded_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter by exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "enum": ["false", "true"]
            },
            "description": "Filter by exclusive boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact genre ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_available_for_streaming",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on streaming available boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_hype",
            "schema": {
              "type": "integer",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_hype boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "label_enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "label_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact label ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive label name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_name_exact",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive label name exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "new_release_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter by exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-id",
                  "-label",
                  "-name",
                  "-publish_date",
                  "-release_date",
                  "-status",
                  "id",
                  "label",
                  "name",
                  "publish_date",
                  "release_date",
                  "status"
                ]
              }
            },
            "description": "Order by a field. Choices: publish_date, release_date, label, name, id             and status. Use -genre for descending order\n\n* `publish_date` - Release Date\n* `-publish_date` - Release Date (descending)\n* `label` - Label\n* `-label` - Label (descending)\n* `name` - Release Name\n* `-name` - Release Name (descending)\n* `id` - Release ID\n* `-id` - Release ID (descending)\n* `status` - Release Status\n* `-status` - Release Status (descending)\n* `release_date` - Release date\n* `-release_date` - Release date (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pre_order_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter by exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter by exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "release_type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact type ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sub_genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact sub-genre ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "track_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact track ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "track_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive track name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on track type. Either Release, Album or Mix\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on release type id\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "upc",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by exact ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "updated",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter by exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReleaseListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/{id}/": {
      "get": {
        "operationId": "catalog_releases_retrieve",
        "description": "A ViewSet Mixin that adds routes for recommendations given one or\nmany items as a reference. Recommendations only apply to items whose\nitem_type_id is present in `publish_beatbot`.`source_item_type_id`.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/{id}/beatbot/": {
      "get": {
        "operationId": "catalog_releases_beatbot_retrieve",
        "description": "Adds the beatbot detail route to the ViewSet\n:param request: the Request object\n:param pk: the source item's primary key\n:return: a Response",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/{id}/images/": {
      "get": {
        "operationId": "catalog_releases_images_retrieve",
        "description": "Return this release's images.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/{id}/uab/": {
      "get": {
        "operationId": "catalog_releases_uab_retrieve",
        "description": "Adds the users-also-bought detail route to the View\n:param request: the Request object\n:param pk: the source item's primary key\n:return: a Response",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/{release_pk}/tracks/": {
      "get": {
        "operationId": "catalog_releases_tracks_list",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "release_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTrackListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/{release_pk}/tracks/facets/": {
      "get": {
        "operationId": "catalog_releases_tracks_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "parameters": [
          {
            "in": "path",
            "name": "release_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/{release_pk}/tracks/ids/": {
      "get": {
        "operationId": "catalog_releases_tracks_ids_retrieve",
        "description": "Return a list of `Track` IDs for the given release.",
        "parameters": [
          {
            "in": "path",
            "name": "release_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseTrackId"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/facets/": {
      "get": {
        "operationId": "catalog_releases_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/similar/": {
      "get": {
        "operationId": "catalog_releases_similar_retrieve",
        "description": "Adds the beatbot list route to the ViewSet\n:param request: the Request object\n:return: a Response",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/releases/top/{num}/": {
      "get": {
        "operationId": "catalog_releases_top_retrieve",
        "description": "Return top <N> releases by global most popular rank, where N limited between 1 and 100.",
        "parameters": [
          {
            "in": "path",
            "name": "num",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/search/": {
      "get": {
        "operationId": "catalog_search_retrieve",
        "description": "Search documentation maintained in frontend/js/routes/docs/search.js.",
        "tags": ["catalog"],
        "security": [
          {
            "oauth2": ["app:control"]
          },
          {
            "oauth2": ["app:baseware"]
          },
          {
            "oauth2": ["app:loadtest"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:microsite"]
          },
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:external"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/catalog/search/facets/": {
      "get": {
        "operationId": "catalog_search_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["catalog"],
        "security": [
          {
            "oauth2": ["app:control"]
          },
          {
            "oauth2": ["app:baseware"]
          },
          {
            "oauth2": ["app:loadtest"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:microsite"]
          },
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:external"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/catalog/sub-genres/": {
      "get": {
        "operationId": "catalog_sub_genres_list",
        "parameters": [
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter by exact genre name match."
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["-id", "-status", "id", "status"]
              }
            },
            "description": "Ordering\n\n* `id` - SubGenre ID\n* `-id` - SubGenre ID (descending)\n* `status` - SubGenre Status\n* `-status` - SubGenre Status (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSubGenreListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/sub-genres/{id}/": {
      "get": {
        "operationId": "catalog_sub_genres_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubGenreDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/sub-genres/{id}/tracks/": {
      "get": {
        "operationId": "catalog_sub_genres_tracks_retrieve",
        "description": "Return this sub-genre's tracks",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubGenre"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/sub-genres/facets/": {
      "get": {
        "operationId": "catalog_sub_genres_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubGenre"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/track-recommendations/": {
      "get": {
        "operationId": "catalog_track_recommendations_retrieve",
        "description": "Logic for /catalog/track-recommendations/.\n\nAllows customer to retrieve tailored recommendations based on their\nplays and purchases.",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/catalog/track-recommendations/facets/": {
      "get": {
        "operationId": "catalog_track_recommendations_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/catalog/tracks/": {
      "get": {
        "operationId": "catalog_tracks_list",
        "description": "A ViewSet Mixin that adds routes for recommendations given one or\nmany items as a reference. Recommendations only apply to items whose\nitem_type_id is present in `publish_beatbot`.`source_item_type_id`.",
        "parameters": [
          {
            "in": "query",
            "name": "artist_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on artist ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "artist_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive artist name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "available_worldwide",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on available worldwide boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "bpm",
            "schema": {
              "type": "integer",
              "maximum": 32767,
              "minimum": -32768,
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range."
          },
          {
            "in": "query",
            "name": "catalog_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive catalog_number exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "change_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "chord_type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on exact key ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "current_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on current_status ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "encode_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive encode status exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "encoded_date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive_period",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on case-insensitive exclusive period exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "free_download_end_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "free_download_start_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "genre_enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on genre ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "guid",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "filter on exact guid match\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_available_for_streaming",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on streaming available boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_classic",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_classic boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_hype",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_hype boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "isrc",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on exact ISRC match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact key ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "\n            Filter key. Denote sharp as #, flat as b with minor/major separated by a space.\n            Available Keys:\n                \"A Minor\"\n                \"A Major\"\n                \"Ab Minor\"\n                \"Ab Major\"\n                \"A# Minor\"\n                \"A# Major\"\n                \"B Minor\"\n                \"B Major\"\n                \"Bb Minor\"\n                \"Bb Major\"\n                \"C Minor\"\n                \"C Major\"\n                \"C# Minor\"\n                \"C# Major\"\n                \"D Minor\"\n                \"D Major\"\n                \"Db Minor\"\n                \"Db Major\"\n                \"D# Minor\"\n                \"D# Major\"\n                \"E Minor\"\n                \"E Major\"\n                \"Eb Minor\"\n                \"Eb Major\"\n                \"F Minor\"\n                \"F Major\"\n                \"F# Minor\"\n                \"F# Major\"\n                \"G Minor\"\n                \"G Major\"\n                \"Gb Minor\"\n                \"Gb Major\"\n                \"G# Minor\"\n                \"G# Major\"\n            \nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "label_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on label ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_manager",
            "schema": {
              "type": "string"
            },
            "description": "Filter by case-insensitive Label Manager name containment."
          },
          {
            "in": "query",
            "name": "label_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive label name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_name_exact",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive label name exact.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "mix_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive remix name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "new_release_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-genre",
                  "-label",
                  "-name",
                  "-publish_date",
                  "-release_date",
                  "-release_id",
                  "genre",
                  "label",
                  "name",
                  "publish_date",
                  "release_date",
                  "release_id"
                ]
              }
            },
            "description": "Order by a field. Choices: publish_date, genre, label, name.             Use -genre for descending order\n\n* `publish_date` - Publish date\n* `-publish_date` - Publish date (descending)\n* `release_id` - Release id\n* `-release_id` - Release id (descending)\n* `release_date` - Release date\n* `-release_date` - Release date (descending)\n* `genre` - Genre\n* `-genre` - Genre (descending)\n* `label` - Label\n* `-label` - Label (descending)\n* `name` - Name\n* `-name` - Name (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pre_order_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on publish_status exact match\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "release_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact release ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "release_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive release name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sale_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive sale type exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sub_genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive sub-genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "track_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on exact track_number match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on track type. Either Release, Album or Mix\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on track release type id\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "was_ever_exclusive",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on was_ever_exclusive boolean match.\n\n* `false` - False\n* `true` - True"
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTrackListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/tracks/{id}/": {
      "get": {
        "operationId": "catalog_tracks_retrieve",
        "description": "Return a territory restricted track.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/tracks/{id}/audio-files/": {
      "get": {
        "operationId": "catalog_tracks_audio_files_retrieve",
        "description": "Return track audio files.\n\nAdds create [POST] helper route, unless provided in request body,\nthis assumes the file is on disk and has been successfully encoded.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/tracks/{id}/beatbot/": {
      "get": {
        "operationId": "catalog_tracks_beatbot_retrieve",
        "description": "Adds the beatbot detail route to the ViewSet\n:param request: the Request object\n:param pk: the source item's primary key\n:return: a Response",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/tracks/{id}/images/": {
      "get": {
        "operationId": "catalog_tracks_images_retrieve",
        "description": "Return this track's images.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/tracks/{id}/publishers/": {
      "get": {
        "operationId": "catalog_tracks_publishers_retrieve",
        "description": "Return this Track's Publishers, updating if necessary",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/tracks/{id}/stream-sdk/": {
      "get": {
        "operationId": "catalog_tracks_stream_sdk_retrieve",
        "description": "A ViewSet Mixin that adds routes for recommendations given one or\nmany items as a reference. Recommendations only apply to items whose\nitem_type_id is present in `publish_beatbot`.`source_item_type_id`.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/tracks/{id}/uab/": {
      "get": {
        "operationId": "catalog_tracks_uab_retrieve",
        "description": "Adds the users-also-bought detail route to the View\n:param request: the Request object\n:param pk: the source item's primary key\n:return: a Response",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/tracks/facets/": {
      "get": {
        "operationId": "catalog_tracks_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/tracks/similar/": {
      "get": {
        "operationId": "catalog_tracks_similar_retrieve",
        "description": "Adds the beatbot list route to the ViewSet\n:param request: the Request object\n:return: a Response",
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/catalog/tracks/store/{isrc}/": {
      "get": {
        "operationId": "catalog_tracks_store_retrieve",
        "description": "Return the store url for a track given the correct isrc.",
        "parameters": [
          {
            "in": "path",
            "name": "isrc",
            "schema": {
              "type": "string"
            },
            "description": "The ISRC of the track",
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OK"
                }
              }
            },
            "description": "200"
          }
        }
      }
    },
    "/v4/catalog/tracks/top/{num}/": {
      "get": {
        "operationId": "catalog_tracks_top_retrieve",
        "description": "Return top <N> tracks by global most popular rank, where N limited between 1 and 100.",
        "parameters": [
          {
            "in": "path",
            "name": "num",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["catalog"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Track"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/curation/playlists/": {
      "get": {
        "operationId": "curation_playlists_list",
        "parameters": [
          {
            "in": "query",
            "name": "artist_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on the artist name\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter on date range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on Genre ID\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on Genre name\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_public",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on Playlist name\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-create_date",
                  "-name",
                  "-update_date",
                  "create_date",
                  "name",
                  "update_date"
                ]
              }
            },
            "description": "Order by a field. Choices: created_date, name, updated_date.             Use -created_datefor descending order\n\n* `create_date` - Create date\n* `-create_date` - Create date (descending)\n* `update_date` - Update date\n* `-update_date` - Update date (descending)\n* `name` - Name\n* `-name` - Name (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "playlist_status",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "playlist_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on Playlist name\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "playlist_type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on Playlist ID\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "updated_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter on date range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact user ID.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive username containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          }
        ],
        "tags": ["curation"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCuratedPlaylistList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/curation/playlists/{curatedplaylist_pk}/tracks/": {
      "get": {
        "operationId": "curation_playlists_tracks_list",
        "parameters": [
          {
            "in": "query",
            "name": "artist_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on artist ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "artist_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive artist name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "available_worldwide",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on available worldwide boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "bpm",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range."
          },
          {
            "in": "query",
            "name": "catalog_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive catalog_number exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "change_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "chord_type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact key ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "curatedplaylist_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "current_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on current_status ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "encode_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive encode status exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "encoded_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive_period",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive exclusive period exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "free_download_end_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "free_download_start_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "genre_enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on genre ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "guid",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "filter on exact guid match\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_available_for_streaming",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on streaming available boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_classic",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_classic boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_hype",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_hype boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "isrc",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on exact ISRC match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact key ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "\n            Filter key. Denote sharp as #, flat as b with minor/major separated by a space.\n            Available Keys:\n                \"A Minor\"\n                \"A Major\"\n                \"Ab Minor\"\n                \"Ab Major\"\n                \"A# Minor\"\n                \"A# Major\"\n                \"B Minor\"\n                \"B Major\"\n                \"Bb Minor\"\n                \"Bb Major\"\n                \"C Minor\"\n                \"C Major\"\n                \"C# Minor\"\n                \"C# Major\"\n                \"D Minor\"\n                \"D Major\"\n                \"Db Minor\"\n                \"Db Major\"\n                \"D# Minor\"\n                \"D# Major\"\n                \"E Minor\"\n                \"E Major\"\n                \"Eb Minor\"\n                \"Eb Major\"\n                \"F Minor\"\n                \"F Major\"\n                \"F# Minor\"\n                \"F# Major\"\n                \"G Minor\"\n                \"G Major\"\n                \"Gb Minor\"\n                \"Gb Major\"\n                \"G# Minor\"\n                \"G# Major\"\n            \nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "label_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on label ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_manager",
            "schema": {
              "type": "string"
            },
            "description": "Filter by case-insensitive Label Manager name containment."
          },
          {
            "in": "query",
            "name": "label_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive label name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_name_exact",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive label name exact.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "mix_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive remix name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "new_release_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-genre",
                  "-label",
                  "-name",
                  "-publish_date",
                  "-release_date",
                  "-release_id",
                  "genre",
                  "label",
                  "name",
                  "publish_date",
                  "release_date",
                  "release_id"
                ]
              }
            },
            "description": "Order by a field. Choices: publish_date, genre, label, name.             Use -genre for descending order\n\n* `publish_date` - Publish date\n* `-publish_date` - Publish date (descending)\n* `release_id` - Release id\n* `-release_id` - Release id (descending)\n* `release_date` - Release date\n* `-release_date` - Release date (descending)\n* `genre` - Genre\n* `-genre` - Genre (descending)\n* `label` - Label\n* `-label` - Label (descending)\n* `name` - Name\n* `-name` - Name (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pre_order_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on publish_status exact match\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "release_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact release ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "release_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive release name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sale_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive sale type exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sub_genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive sub-genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "track_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact track_number match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on track type. Either Release, Album or Mix\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on track release type id\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "was_ever_exclusive",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on was_ever_exclusive boolean match.\n\n* `false` - False\n* `true` - True"
          }
        ],
        "tags": ["curation"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlaylistTrackList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/curation/playlists/{curatedplaylist_pk}/tracks/{id}/": {
      "get": {
        "operationId": "curation_playlists_tracks_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "curatedplaylist_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["curation"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistTrack"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/curation/playlists/{curatedplaylist_pk}/tracks/facets/": {
      "get": {
        "operationId": "curation_playlists_tracks_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "parameters": [
          {
            "in": "path",
            "name": "curatedplaylist_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["curation"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistTrack"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/curation/playlists/{id}/": {
      "get": {
        "operationId": "curation_playlists_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["curation"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistProxy"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/curation/playlists/facets/": {
      "get": {
        "operationId": "curation_playlists_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["curation"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CuratedPlaylist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/db-health-check/": {
      "get": {
        "operationId": "db_health_check_retrieve",
        "tags": ["db-health-check"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/health-check/": {
      "get": {
        "operationId": "health_check_retrieve",
        "tags": ["health-check"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/account/": {
      "get": {
        "operationId": "my_account_list",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPersonAccountList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/account/{id}/": {
      "put": {
        "operationId": "my_account_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAccountUpdate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonAccountUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "my_account_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPersonAccountUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonAccountUpdate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/account/facets/": {
      "get": {
        "operationId": "my_account_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonAccountUpdate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/account/myaccount/": {
      "put": {
        "operationId": "my_account_myaccount_update",
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonAccountUpdate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonAccountUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "my_account_myaccount_partial_update",
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPersonAccountUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonAccountUpdate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/beatport/": {
      "get": {
        "operationId": "my_beatport_list",
        "parameters": [
          {
            "in": "query",
            "name": "item_publish_date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter on date range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "publish_date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter on date range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:loadtest"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMyBeatportListList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "my_beatport_create",
        "description": "Create subscription entries for the requesting user for the provided\nartist or label ids.",
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MyBeatportList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MyBeatportList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyBeatportList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/beatport/artists/": {
      "get": {
        "operationId": "my_beatport_artists_retrieve",
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:loadtest"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyBeatportList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/beatport/delete/": {
      "delete": {
        "operationId": "my_beatport_delete_destroy",
        "description": "Delete subscription entries for the requesting user for the provided\nartist or label ids.",
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/beatport/facets/": {
      "get": {
        "operationId": "my_beatport_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:loadtest"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyBeatportList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/beatport/labels/": {
      "get": {
        "operationId": "my_beatport_labels_retrieve",
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:loadtest"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyBeatportList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/beatport/playlists/": {
      "get": {
        "operationId": "my_beatport_playlists_retrieve",
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:loadtest"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyBeatportList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/beatport/tracks/": {
      "get": {
        "operationId": "my_beatport_tracks_retrieve",
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:loadtest"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyBeatportList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "my_beatport_tracks_create",
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MyBeatportList"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/MyBeatportList"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "oauth2": ["app:store"]
          },
          {
            "oauth2": ["app:prostore"]
          },
          {
            "oauth2": ["app:locker"]
          },
          {
            "oauth2": ["app:djapp"]
          },
          {
            "oauth2": ["app:mobile"]
          },
          {
            "oauth2": ["app:docs"]
          },
          {
            "oauth2": ["app:externaltrusted"]
          },
          {
            "oauth2": ["app:beatportal"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyBeatportList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/charts/": {
      "get": {
        "operationId": "my_charts_list",
        "parameters": [
          {
            "in": "query",
            "name": "add_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter by date added.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "curated_playlist_genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on genre ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "dj_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by the exact dj profile id.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "dj_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive DJ name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "dj_slug",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive DJ slug containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on genre ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact chart ID.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_approved",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by approved boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_curated_playlist",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by is curated playlist boolean match."
          },
          {
            "in": "query",
            "name": "is_indexed",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by indexed boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_published",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter by published boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "publish_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter by date published.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "register_ip_address",
            "schema": {
              "type": "integer",
              "maximum": 9223372036854775807,
              "minimum": -9223372036854775808,
              "format": "int64"
            },
            "description": "Filter by exact registration IP address match."
          },
          {
            "in": "query",
            "name": "sub_genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on sub genre ID.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sub_genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive sub_genre name\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "track_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on track_id.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "updated",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter by date added.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter by exact user ID.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter by case-insensitive username containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChartListList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "my_charts_create",
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MyChartCreateUpdate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyChartCreateUpdate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/charts/{mycharts_pk}/tracks/": {
      "get": {
        "operationId": "my_charts_tracks_list",
        "parameters": [
          {
            "in": "path",
            "name": "mycharts_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChartTrackList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "my_charts_tracks_create",
        "parameters": [
          {
            "in": "path",
            "name": "mycharts_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MyChartTrackCreateUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyChartTrackCreateUpdate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/charts/{mycharts_pk}/tracks/{id}/": {
      "put": {
        "operationId": "my_charts_tracks_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "mycharts_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MyChartTrackCreateUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyChartTrackCreateUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "my_charts_tracks_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "mycharts_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedMyChartTrackCreateUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyChartTrackCreateUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "my_charts_tracks_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "mycharts_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/charts/{mycharts_pk}/tracks/facets/": {
      "get": {
        "operationId": "my_charts_tracks_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "parameters": [
          {
            "in": "path",
            "name": "mycharts_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartTrack"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/charts/{id}/": {
      "get": {
        "operationId": "my_charts_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartDetail"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "my_charts_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MyChartCreateUpdate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyChartCreateUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "my_charts_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedMyChartCreateUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyChartCreateUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "my_charts_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/charts/{id}/images/": {
      "get": {
        "operationId": "my_charts_images_retrieve",
        "description": "Return/create this chart's images.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "my_charts_images_create",
        "description": "Return/create this chart's images.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Chart"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/charts/facets/": {
      "get": {
        "operationId": "my_charts_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/downloads/": {
      "get": {
        "operationId": "my_downloads_list",
        "parameters": [
          {
            "in": "query",
            "name": "artist_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on artist ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "artist_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive artist name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "available_worldwide",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on available worldwide boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "bpm",
            "schema": {
              "type": "integer",
              "maximum": 32767,
              "minimum": -32768,
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range."
          },
          {
            "in": "query",
            "name": "catalog_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive catalog_number exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "change_date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "chord_type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on exact key ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "current_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on current_status ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "encode_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive encode status exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "encoded_date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive_period",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on case-insensitive exclusive period exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "free_download_end_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "free_download_start_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "genre_enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on genre ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "guid",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "filter on exact guid match\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_available_for_streaming",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on streaming available boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_classic",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_classic boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_hype",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_hype boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "isrc",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on exact ISRC match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact key ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "\n            Filter key. Denote sharp as #, flat as b with minor/major separated by a space.\n            Available Keys:\n                \"A Minor\"\n                \"A Major\"\n                \"Ab Minor\"\n                \"Ab Major\"\n                \"A# Minor\"\n                \"A# Major\"\n                \"B Minor\"\n                \"B Major\"\n                \"Bb Minor\"\n                \"Bb Major\"\n                \"C Minor\"\n                \"C Major\"\n                \"C# Minor\"\n                \"C# Major\"\n                \"D Minor\"\n                \"D Major\"\n                \"Db Minor\"\n                \"Db Major\"\n                \"D# Minor\"\n                \"D# Major\"\n                \"E Minor\"\n                \"E Major\"\n                \"Eb Minor\"\n                \"Eb Major\"\n                \"F Minor\"\n                \"F Major\"\n                \"F# Minor\"\n                \"F# Major\"\n                \"G Minor\"\n                \"G Major\"\n                \"Gb Minor\"\n                \"Gb Major\"\n                \"G# Minor\"\n                \"G# Major\"\n            \nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_enabled",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "label_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on label ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_manager",
            "schema": {
              "type": "string"
            },
            "description": "Filter by case-insensitive Label Manager name containment."
          },
          {
            "in": "query",
            "name": "label_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive label name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_name_exact",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive label name exact.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "mix_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive remix name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "new_release_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-genre",
                  "-label",
                  "-name",
                  "-publish_date",
                  "-release_date",
                  "-release_id",
                  "genre",
                  "label",
                  "name",
                  "publish_date",
                  "release_date",
                  "release_id"
                ]
              }
            },
            "description": "Order by a field. Choices: publish_date, genre, label, name.             Use -genre for descending order\n\n* `publish_date` - Publish date\n* `-publish_date` - Publish date (descending)\n* `release_id` - Release id\n* `-release_id` - Release id (descending)\n* `release_date` - Release date\n* `-release_date` - Release date (descending)\n* `genre` - Genre\n* `-genre` - Genre (descending)\n* `label` - Label\n* `-label` - Label (descending)\n* `name` - Name\n* `-name` - Name (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pre_order_date",
            "schema": {
              "type": "string",
              "format": "date",
              "nullable": true
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on publish_status exact match\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "purchase_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "received_status",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on download received status boolean.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "release_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact release ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "release_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive release name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sale_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive sale type exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sub_genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive sub-genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "track_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on exact track_number match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on track type. Either Release, Album or Mix\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on track release type id\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "was_ever_exclusive",
            "schema": {
              "type": "boolean",
              "enum": ["false", "true"]
            },
            "description": "Filter on was_ever_exclusive boolean match.\n\n* `false` - False\n* `true` - True"
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:docs", "user:dj"]
          },
          {
            "oauth2": ["app:locker", "user:dj"]
          },
          {
            "oauth2": ["app:djapp", "user:dj"]
          },
          {
            "oauth2": ["app:mobile", "user:dj"]
          },
          {
            "oauth2": ["app:control", "user:dj"]
          },
          {
            "oauth2": ["app:store", "user:dj"]
          },
          {
            "oauth2": ["app:prostore", "user:dj"]
          },
          {
            "oauth2": ["app:externaltrusted", "user:dj"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTrackDownloadListList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/downloads/encode-status/": {
      "get": {
        "operationId": "my_downloads_encode_status_retrieve",
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:docs", "user:dj"]
          },
          {
            "oauth2": ["app:control", "user:dj"]
          },
          {
            "oauth2": ["app:store", "user:dj"]
          },
          {
            "oauth2": ["app:prostore", "user:dj"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/downloads/encode-status/facets/": {
      "get": {
        "operationId": "my_downloads_encode_status_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:docs", "user:dj"]
          },
          {
            "oauth2": ["app:control", "user:dj"]
          },
          {
            "oauth2": ["app:store", "user:dj"]
          },
          {
            "oauth2": ["app:prostore", "user:dj"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/downloads/facets/": {
      "get": {
        "operationId": "my_downloads_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["my"],
        "security": [
          {
            "oauth2": ["app:docs", "user:dj"]
          },
          {
            "oauth2": ["app:locker", "user:dj"]
          },
          {
            "oauth2": ["app:djapp", "user:dj"]
          },
          {
            "oauth2": ["app:mobile", "user:dj"]
          },
          {
            "oauth2": ["app:control", "user:dj"]
          },
          {
            "oauth2": ["app:store", "user:dj"]
          },
          {
            "oauth2": ["app:prostore", "user:dj"]
          },
          {
            "oauth2": ["app:externaltrusted", "user:dj"]
          },
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackDownloadList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/email-preferences/": {
      "get": {
        "operationId": "my_email_preferences_retrieve",
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/email-preferences/{id}/": {
      "patch": {
        "operationId": "my_email_preferences_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/email-preferences/facets/": {
      "get": {
        "operationId": "my_email_preferences_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/genres/": {
      "get": {
        "operationId": "my_genres_list",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGenreListList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "my_genres_create",
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenreSubscribe"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenreSubscribe"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/genres/{id}/": {
      "delete": {
        "operationId": "my_genres_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/genres/facets/": {
      "get": {
        "operationId": "my_genres_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenreDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/playlists/": {
      "get": {
        "operationId": "my_playlists_list",
        "description": "Return list of Playlists belonging to authenticated user.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlaylistProxyList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "my_playlists_create",
        "description": "Create a Playlist for the request User.",
        "tags": ["my"],
        "requestBody": {
          "content": {
            "POST_PATCH": {
              "schema": {
                "$ref": "#/components/schemas/Request_body"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist_metadata_response"
                }
              }
            },
            "description": "200"
          }
        }
      }
    },
    "/v4/my/playlists/{myplaylists_pk}/tracks/": {
      "get": {
        "operationId": "my_playlists_tracks_list",
        "description": "Return a list of `PlaylistTrack` objects for the given playlist.\n\nThe `PlaylistTrack` has a computed value \"tombstoned\" which indicates if the track was\nadded to a LINK playlist but is no longer available for LINK. The track remains in the\nuser's playlist but isn't streamable.",
        "parameters": [
          {
            "in": "query",
            "name": "artist_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on artist ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "artist_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive artist name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "available_worldwide",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on available worldwide boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "bpm",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range."
          },
          {
            "in": "query",
            "name": "catalog_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive catalog_number exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "change_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "chord_type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact key ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "current_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on current_status ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "encode_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive encode status exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "encoded_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "exclusive_period",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive exclusive period exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "free_download_end_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "free_download_start_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "genre_enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on genre ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "genre_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "guid",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "filter on exact guid match\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "Filter on ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_available_for_streaming",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on streaming available boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_classic",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_classic boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "is_hype",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on is_hype boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "isrc",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on exact ISRC match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact key ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "key_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "\n            Filter key. Denote sharp as #, flat as b with minor/major separated by a space.\n            Available Keys:\n                \"A Minor\"\n                \"A Major\"\n                \"Ab Minor\"\n                \"Ab Major\"\n                \"A# Minor\"\n                \"A# Major\"\n                \"B Minor\"\n                \"B Major\"\n                \"Bb Minor\"\n                \"Bb Major\"\n                \"C Minor\"\n                \"C Major\"\n                \"C# Minor\"\n                \"C# Major\"\n                \"D Minor\"\n                \"D Major\"\n                \"Db Minor\"\n                \"Db Major\"\n                \"D# Minor\"\n                \"D# Major\"\n                \"E Minor\"\n                \"E Major\"\n                \"Eb Minor\"\n                \"Eb Major\"\n                \"F Minor\"\n                \"F Major\"\n                \"F# Minor\"\n                \"F# Major\"\n                \"G Minor\"\n                \"G Major\"\n                \"Gb Minor\"\n                \"Gb Major\"\n                \"G# Minor\"\n                \"G# Major\"\n            \nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_enabled",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on enabled boolean match.\n\n* `false` - False\n* `true` - True"
          },
          {
            "in": "query",
            "name": "label_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on label ID exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_manager",
            "schema": {
              "type": "string"
            },
            "description": "Filter by case-insensitive Label Manager name containment."
          },
          {
            "in": "query",
            "name": "label_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive label name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "label_name_exact",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive label name exact.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "mix_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive remix name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "path",
            "name": "myplaylists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "new_release_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-genre",
                  "-label",
                  "-name",
                  "-publish_date",
                  "-release_date",
                  "-release_id",
                  "genre",
                  "label",
                  "name",
                  "publish_date",
                  "release_date",
                  "release_id"
                ]
              }
            },
            "description": "Order by a field. Choices: publish_date, genre, label, name.             Use -genre for descending order\n\n* `publish_date` - Publish date\n* `-publish_date` - Publish date (descending)\n* `release_id` - Release id\n* `-release_id` - Release id (descending)\n* `release_date` - Release date\n* `-release_date` - Release date (descending)\n* `genre` - Genre\n* `-genre` - Genre (descending)\n* `label` - Label\n* `-label` - Label (descending)\n* `name` - Name\n* `-name` - Name (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pre_order_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_date",
            "schema": {
              "type": "string"
            },
            "description": "Filter on exact, less/greater than equal and range.\nSupports slice syntax:\n\n`date=1970-01-01` (exact)\n`date=:1971-01-01` (less than equal)\n`date=1970-01-01:` (greater than equal)\n`date=1970-01-01:1971-01-01` (range)\n"
          },
          {
            "in": "query",
            "name": "publish_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on publish_status exact match\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "release_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact release ID match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "release_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive release name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sale_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive sale type exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sub_genre_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive sub-genre exact match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "supplier_name",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on case-insensitive name containment.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "track_number",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on exact track_number match.\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Filter on track type. Either Release, Album or Mix\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "Filter on track release type id\nSupports `OR` lookup:\n\n`param=value1,value2`\n",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "was_ever_exclusive",
            "schema": {
              "type": "string",
              "enum": ["false", "true"]
            },
            "description": "Filter on was_ever_exclusive boolean match.\n\n* `false` - False\n* `true` - True"
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlaylistTrackList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "my_playlists_tracks_create",
        "parameters": [
          {
            "in": "path",
            "name": "myplaylists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaylistTrackCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistTrackCreate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/playlists/{myplaylists_pk}/tracks/{id}/": {
      "patch": {
        "operationId": "my_playlists_tracks_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "myplaylists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPlaylistTrackUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistTrackUpdate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "my_playlists_tracks_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "myplaylists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/playlists/{myplaylists_pk}/tracks/bulk/": {
      "post": {
        "operationId": "my_playlists_tracks_bulk_create",
        "parameters": [
          {
            "in": "path",
            "name": "myplaylists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "POST": {
              "schema": {
                "$ref": "#/components/schemas/Add_list_of_tracks_to_playlist"
              },
              "examples": {
                "AddListOfTracksToPlaylist": {
                  "value": {
                    "track_ids": [1, 2, 3]
                  },
                  "summary": "Add list of tracks to playlist"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post_response"
                },
                "examples": {
                  "": {
                    "value": {
                      "items": {},
                      "playlist": {}
                    }
                  }
                }
              }
            },
            "description": "200"
          }
        }
      },
      "patch": {
        "operationId": "my_playlists_tracks_bulk_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "myplaylists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "PATCH": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTracks_to_update"
              },
              "examples": {
                "TracksToUpdate": {
                  "value": {
                    "items": [
                      {
                        "item_id": 12,
                        "position": 1
                      },
                      {
                        "item_id": 81,
                        "position": 4
                      }
                    ]
                  },
                  "summary": "Tracks to update"
                }
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist_metadata_response"
                }
              }
            },
            "description": "200"
          }
        }
      },
      "delete": {
        "operationId": "my_playlists_tracks_bulk_destroy",
        "description": "\nRequest Body:<br>\nItem IDs to delete. The body should include:<br>\n<strong>item_ids</strong> (required): List of playlist tracks to delete from the playlist.\n(example: {\"item_ids\": [<id>, <id>, ...]}\n  <br>Example: {\"item_ids\": [1, 2, 3]}\n",
        "parameters": [
          {
            "in": "path",
            "name": "myplaylists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist_metadata_response"
                }
              }
            },
            "description": "200"
          }
        }
      }
    },
    "/v4/my/playlists/{myplaylists_pk}/tracks/facets/": {
      "get": {
        "operationId": "my_playlists_tracks_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "parameters": [
          {
            "in": "path",
            "name": "myplaylists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistTrack"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/playlists/{myplaylists_pk}/tracks/ids/": {
      "get": {
        "operationId": "my_playlists_tracks_ids_retrieve",
        "description": "Return a list of `PlaylistTrack` IDs for the given playlist.",
        "parameters": [
          {
            "in": "path",
            "name": "myplaylists_pk",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistTrackId"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/playlists/{id}/": {
      "get": {
        "operationId": "my_playlists_retrieve",
        "description": "Return a Playlist.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist_metadata_response"
                }
              }
            },
            "description": "200"
          }
        }
      },
      "patch": {
        "operationId": "my_playlists_partial_update",
        "description": "Update a Playlist for the request User.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "requestBody": {
          "content": {
            "POST_PATCH": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRequest_body"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist_metadata_response"
                }
              }
            },
            "description": "200"
          }
        }
      },
      "delete": {
        "operationId": "my_playlists_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/playlists/bulk/": {
      "patch": {
        "operationId": "my_playlists_bulk_partial_update",
        "description": "Update playlist positions.",
        "tags": ["my"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPlaylistBulkUpdate"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistBulkUpdate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/playlists/facets/": {
      "get": {
        "operationId": "my_playlists_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Playlist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/v4/my/streaming-quality/": {
      "get": {
        "operationId": "my_streaming_quality_retrieve",
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/streaming-quality/{id}/": {
      "patch": {
        "operationId": "my_streaming_quality_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "required": true
          }
        ],
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/v4/my/streaming-quality/facets/": {
      "get": {
        "operationId": "my_streaming_quality_facets_retrieve",
        "description": "Return all filter facets for this endpoint, including help text.\n\nIf no filters are present, an empty response is returned.",
        "tags": ["my"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Add_list_of_tracks_to_playlist": {
        "type": "object",
        "properties": {
          "track_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of track IDs to add to the playlist(example: {\"track_ids\": [<id>, <id>, ...]}"
          }
        },
        "required": ["track_ids"]
      },
      "Artist": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "dj_association": {
            "type": "string",
            "readOnly": true
          },
          "add_by": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "add_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "change_by": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "change_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "latest_active_publish_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 240
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          }
        },
        "required": [
          "add_date",
          "change_date",
          "created",
          "dj_association",
          "image",
          "name",
          "updated",
          "url"
        ]
      },
      "ArtistDetail": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "bio": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "dj_association": {
            "type": "string",
            "readOnly": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "website": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "bio",
          "dj_association",
          "enabled",
          "id",
          "image",
          "name",
          "slug",
          "website"
        ]
      },
      "ArtistList": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "website": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "dj_association": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "created",
          "dj_association",
          "id",
          "image",
          "name",
          "slug",
          "updated",
          "url",
          "website"
        ]
      },
      "ArtistNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["id", "name", "slug"]
      },
      "ArtistType": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 32
          }
        },
        "required": ["created_date", "name", "updated_date", "url"]
      },
      "ArtistTypeDetail": {
        "type": "object",
        "properties": {
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_person_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_person_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "created_date",
          "created_person_id",
          "id",
          "name",
          "updated_date",
          "updated_person_id"
        ]
      },
      "ArtistTypeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["id", "name", "url"]
      },
      "AudioFormatNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 32
          }
        },
        "required": ["id", "name"]
      },
      "Chart": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "person": {
            "type": "string",
            "readOnly": true
          },
          "price": {
            "type": "object",
            "additionalProperties": {}
          },
          "track_count": {
            "type": "integer"
          },
          "curated_playlist_genre": {
            "$ref": "#/components/schemas/GenreNested"
          },
          "add_by": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "add_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "change_by": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "change_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "item_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "item_type_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "is_approved": {
            "type": "boolean"
          },
          "is_indexed": {
            "type": "boolean"
          },
          "is_published": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "maxLength": 45
          },
          "publish_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "add_date",
          "change_date",
          "curated_playlist_genre",
          "enabled",
          "image",
          "name",
          "person",
          "price",
          "track_count",
          "updated",
          "url"
        ]
      },
      "ChartDetail": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "add_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "add_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "change_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "is_approved": {
            "type": "boolean",
            "readOnly": true
          },
          "is_indexed": {
            "type": "boolean",
            "readOnly": true
          },
          "is_published": {
            "type": "boolean",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "person": {
            "type": "string",
            "readOnly": true
          },
          "price": {
            "type": "object",
            "additionalProperties": {}
          },
          "publish_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "track_count": {
            "type": "integer"
          },
          "artist": {
            "$ref": "#/components/schemas/ArtistNested"
          },
          "genres": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "add_by",
          "add_date",
          "artist",
          "change_date",
          "description",
          "enabled",
          "genres",
          "id",
          "image",
          "is_approved",
          "is_indexed",
          "is_published",
          "name",
          "person",
          "price",
          "publish_date",
          "slug",
          "track_count"
        ]
      },
      "ChartGenreOverview": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "genre": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["count", "genre"]
      },
      "ChartList": {
        "type": "object",
        "description": "A Mixin for dynicmally including fields based on a user's scopes.\n\nIf this Mixin is used an attr `include_by_scope` should be included\non the serializer that subclasses this mixin. This attr should be\na dict mapping field -> list of allowed scopes.\n\nFor example, the following definition would allow the field named\n`dynamic_field` to be visible by admin user in baseware or a\nmarketing user in control.\n\n```\nclass SerializerClass(ModelSerializer):\n    ...\n\n    include_by_scope = {\n        'dynamic_field' = [\n            ['app:baseware', 'staff:admin'],\n            ['app:control', 'staff:marketing'],\n        ]\n    }\n```",
        "properties": {
          "add_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "change_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "person": {
            "type": "string",
            "readOnly": true
          },
          "price": {
            "type": "object",
            "additionalProperties": {}
          },
          "publish_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "track_count": {
            "type": "integer"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "artist": {
            "$ref": "#/components/schemas/ArtistNested"
          },
          "genres": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "add_date",
          "artist",
          "change_date",
          "genres",
          "id",
          "image",
          "name",
          "person",
          "price",
          "publish_date",
          "slug",
          "track_count",
          "url"
        ]
      },
      "ChartTrack": {
        "type": "object",
        "description": "Overides the create/update methods for models with Audit Columns.\n\nThis is to be used by the Create/Update Serializers of models w/\naudit columns: created/updated_date, created/updated_person_id, etc.\n\nExample:\n  ```\n  class BankCreateUpdateSerializer(AuditColumnsSerializerMixin,\n                                   serializers.ModelSerializer):\n  ```\n\nNote that the Mixin comes before the parent class `ModelSerializer`.\nAlso, if the class defines a custom `create/update()` method you\nmust call `super().create/update()`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "track": {
            "$ref": "#/components/schemas/TrackList"
          }
        },
        "required": ["id", "position", "track"]
      },
      "ChordTypeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["id", "name", "url"]
      },
      "CommercialModelType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 32
          }
        },
        "required": ["created_date", "id", "name", "updated_date"]
      },
      "CommercialModelTypeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["id", "name"]
      },
      "CuratedPlaylist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "genre": {
            "$ref": "#/components/schemas/GenreNested"
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": ["created_date", "id", "name", "updated_date"]
      },
      "CurrentStatusList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["id", "name", "url"]
      },
      "EncodeStatusEnum": {
        "enum": ["STANDARD", "PRIORITY", "CONVERTED", "ERROR", "TRANSCODING"],
        "type": "string",
        "description": "* `STANDARD` - STANDARD\n* `PRIORITY` - PRIORITY\n* `CONVERTED` - CONVERTED\n* `ERROR` - ERROR\n* `TRANSCODING` - TRANSCODING"
      },
      "ExclusivePeriodNested": {
        "type": "object",
        "properties": {
          "days": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "description": {
            "type": "string",
            "maxLength": 128
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["description", "id", "url"]
      },
      "Genre": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "sub_genres": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubGenreNested"
            }
          },
          "is_included_in_hype": {
            "type": "boolean"
          },
          "url_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "enabled": {
            "type": "boolean"
          },
          "latest_active_publish_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "created",
          "enabled",
          "is_included_in_hype",
          "name",
          "updated",
          "url"
        ]
      },
      "GenreDetail": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "is_included_in_hype": {
            "type": "boolean",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "sub_genres": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubGenreNested"
            }
          }
        },
        "required": ["enabled", "id", "is_included_in_hype", "name", "slug"]
      },
      "GenreList": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "sub_genres": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubGenreNested"
            }
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["enabled", "id", "name", "slug", "url"]
      },
      "GenreNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["id", "name", "slug", "url"]
      },
      "GenreSubscribe": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "required": ["id"]
      },
      "ImageList": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "media_url": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["guid", "id", "media_url", "url"]
      },
      "Item": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "integer"
          },
          "position": {
            "type": "integer"
          }
        },
        "required": ["item_id", "position"]
      },
      "KeyList": {
        "type": "object",
        "properties": {
          "camelot_number": {
            "type": "integer",
            "readOnly": true
          },
          "camelot_letter": {
            "type": "string",
            "readOnly": true
          },
          "chord_type": {
            "$ref": "#/components/schemas/ChordTypeList"
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "is_sharp": {
            "type": "boolean",
            "readOnly": true
          },
          "is_flat": {
            "type": "boolean",
            "readOnly": true
          },
          "letter": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": [
          "camelot_letter",
          "camelot_number",
          "chord_type",
          "id",
          "is_flat",
          "is_sharp",
          "letter",
          "name",
          "url"
        ]
      },
      "Label": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "label_manager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LabelManagerNested"
              }
            ],
            "nullable": true
          },
          "supplier": {
            "$ref": "#/components/schemas/SupplierNested"
          },
          "temp_account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TempAccount"
              }
            ],
            "readOnly": true
          },
          "hype_eligible": {
            "type": "string",
            "readOnly": true,
            "default": false
          },
          "add_by": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "change_by": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "default_exclusivity_weeks": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "default_pre_order_weeks": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "hype_trial_start_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "hype_trial_end_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "is_available_for_hype": {
            "type": "boolean"
          },
          "is_available_for_bundle_subscription": {
            "type": "boolean"
          },
          "is_available_for_pre_order": {
            "type": "boolean"
          },
          "is_available_for_streaming": {
            "type": "boolean"
          },
          "is_included_in_rightsflow": {
            "type": "boolean"
          },
          "latest_active_publish_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "created",
          "hype_eligible",
          "image",
          "label_manager",
          "name",
          "supplier",
          "temp_account",
          "updated",
          "url"
        ]
      },
      "LabelCSVExport": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "aggregator": {
            "type": "string"
          },
          "label_name": {
            "type": "string"
          },
          "release_name": {
            "type": "string"
          },
          "release_upc": {
            "type": "string"
          },
          "release_catalog_number": {
            "type": "string"
          },
          "release_publish_date": {
            "type": "string",
            "format": "date"
          },
          "track_name": {
            "type": "string"
          },
          "track_mix_name": {
            "type": "string"
          },
          "artists": {
            "type": "string"
          },
          "remixers": {
            "type": "string"
          },
          "track_isrc": {
            "type": "string"
          },
          "track_publish_date": {
            "type": "string",
            "format": "date"
          },
          "track_publish_status": {
            "type": "string"
          },
          "track_number": {
            "type": "integer"
          },
          "genre_name": {
            "type": "string"
          },
          "sub_genre_name": {
            "type": "string"
          },
          "songwriter_names": {
            "type": "string"
          },
          "publisher_names": {
            "type": "string"
          }
        },
        "required": [
          "aggregator",
          "artists",
          "genre_name",
          "label_name",
          "publisher_names",
          "release_catalog_number",
          "release_name",
          "release_publish_date",
          "release_upc",
          "remixers",
          "songwriter_names",
          "sub_genre_name",
          "track_isrc",
          "track_mix_name",
          "track_name",
          "track_number",
          "track_publish_date",
          "track_publish_status"
        ]
      },
      "LabelDetail": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "bio": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "default_pre_order_weeks": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "has_exclusive_contract": {
            "type": "string",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "is_available_for_hype": {
            "type": "boolean",
            "readOnly": true
          },
          "is_available_for_bundle_subscription": {
            "type": "boolean",
            "readOnly": true
          },
          "is_available_for_pre_order": {
            "type": "boolean",
            "readOnly": true
          },
          "is_available_for_streaming": {
            "type": "boolean",
            "readOnly": true
          },
          "is_included_in_rightsflow": {
            "type": "boolean",
            "readOnly": true
          },
          "latest_active_publish_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "hype_eligible": {
            "type": "string",
            "readOnly": true,
            "default": false
          },
          "hype_active": {
            "type": "boolean",
            "description": "Logic here should mirror hype_active filter method\nif we can find a non expired subscription for that label\nthat means that label is hype active",
            "readOnly": true
          },
          "hype_trial_start_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "hype_trial_end_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "bio",
          "created",
          "default_pre_order_weeks",
          "enabled",
          "has_exclusive_contract",
          "hype_active",
          "hype_eligible",
          "hype_trial_end_date",
          "hype_trial_start_date",
          "id",
          "image",
          "is_available_for_bundle_subscription",
          "is_available_for_hype",
          "is_available_for_pre_order",
          "is_available_for_streaming",
          "is_included_in_rightsflow",
          "latest_active_publish_date",
          "name",
          "slug",
          "updated"
        ]
      },
      "LabelList": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "default_pre_order_weeks": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "has_exclusive_contract": {
            "type": "boolean",
            "default": false
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "is_available_for_hype": {
            "type": "boolean",
            "readOnly": true
          },
          "is_available_for_pre_order": {
            "type": "boolean",
            "readOnly": true
          },
          "is_available_for_streaming": {
            "type": "boolean",
            "readOnly": true
          },
          "latest_active_publish_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "hype_eligible": {
            "type": "string",
            "readOnly": true,
            "default": false
          },
          "hype_active": {
            "type": "boolean",
            "description": "Logic here should mirror hype_active filter method\nif we can find a non expired subscription for that label\nthat means that label is hype active",
            "readOnly": true
          },
          "hype_trial_start_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "hype_trial_end_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "created",
          "default_pre_order_weeks",
          "enabled",
          "hype_active",
          "hype_eligible",
          "hype_trial_end_date",
          "hype_trial_start_date",
          "id",
          "image",
          "is_available_for_hype",
          "is_available_for_pre_order",
          "is_available_for_streaming",
          "latest_active_publish_date",
          "name",
          "slug",
          "updated",
          "url"
        ]
      },
      "LabelManagerNested": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "phone_primary": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["email", "enabled", "id", "name", "phone_primary"]
      },
      "LabelNested": {
        "type": "object",
        "description": "A Mixin for dynicmally including fields based on a user's scopes.\n\nIf this Mixin is used an attr `include_by_scope` should be included\non the serializer that subclasses this mixin. This attr should be\na dict mapping field -> list of allowed scopes.\n\nFor example, the following definition would allow the field named\n`dynamic_field` to be visible by admin user in baseware or a\nmarketing user in control.\n\n```\nclass SerializerClass(ModelSerializer):\n    ...\n\n    include_by_scope = {\n        'dynamic_field' = [\n            ['app:baseware', 'staff:admin'],\n            ['app:control', 'staff:marketing'],\n        ]\n    }\n```",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["id", "image", "name", "slug"]
      },
      "MyBeatportList": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "publish_date": {
            "type": "string",
            "format": "date-time"
          },
          "container_item_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "container_item_type_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "item_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "item_type_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "item_publish_date": {
            "type": "string",
            "format": "date-time"
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "container_item_id",
          "container_item_type_id",
          "created_date",
          "item_id",
          "item_publish_date",
          "item_type_id",
          "publish_date",
          "updated_date",
          "url"
        ]
      },
      "MyChartCreateUpdate": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "is_published": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "maxLength": 45
          }
        },
        "required": ["name"]
      },
      "MyChartTrackCreateUpdate": {
        "type": "object",
        "description": "Overides the create/update methods for models with Audit Columns.\n\nThis is to be used by the Create/Update Serializers of models w/\naudit columns: created/updated_date, created/updated_person_id, etc.\n\nExample:\n  ```\n  class BankCreateUpdateSerializer(AuditColumnsSerializerMixin,\n                                   serializers.ModelSerializer):\n  ```\n\nNote that the Mixin comes before the parent class `ModelSerializer`.\nAlso, if the class defines a custom `create/update()` method you\nmust call `super().create/update()`.",
        "properties": {
          "position": {
            "type": "integer"
          },
          "track": {
            "type": "integer"
          }
        }
      },
      "OK": {
        "type": "object",
        "properties": {
          "store_url": {
            "type": "string",
            "description": "Track store url."
          }
        },
        "required": ["store_url"]
      },
      "PaginatedArtistListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArtistList"
            }
          }
        }
      },
      "PaginatedArtistTypeListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArtistTypeList"
            }
          }
        }
      },
      "PaginatedChartListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartList"
            }
          }
        }
      },
      "PaginatedChartTrackList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartTrack"
            }
          }
        }
      },
      "PaginatedCommercialModelTypeListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommercialModelTypeList"
            }
          }
        }
      },
      "PaginatedCuratedPlaylistList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CuratedPlaylist"
            }
          }
        }
      },
      "PaginatedGenreListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreList"
            }
          }
        }
      },
      "PaginatedLabelListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelList"
            }
          }
        }
      },
      "PaginatedMyBeatportListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyBeatportList"
            }
          }
        }
      },
      "PaginatedPersonAccountList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonAccount"
            }
          }
        }
      },
      "PaginatedPlaylistProxyList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlaylistProxy"
            }
          }
        }
      },
      "PaginatedPlaylistTrackList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlaylistTrack"
            }
          }
        }
      },
      "PaginatedReleaseListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReleaseList"
            }
          }
        }
      },
      "PaginatedSubGenreListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubGenreList"
            }
          }
        }
      },
      "PaginatedTrackDownloadListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackDownloadList"
            }
          }
        }
      },
      "PaginatedTrackListList": {
        "type": "object",
        "required": ["count", "results"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackList"
            }
          }
        }
      },
      "PatchedMyChartCreateUpdate": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "is_published": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "maxLength": 45
          }
        }
      },
      "PatchedMyChartTrackCreateUpdate": {
        "type": "object",
        "description": "Overides the create/update methods for models with Audit Columns.\n\nThis is to be used by the Create/Update Serializers of models w/\naudit columns: created/updated_date, created/updated_person_id, etc.\n\nExample:\n  ```\n  class BankCreateUpdateSerializer(AuditColumnsSerializerMixin,\n                                   serializers.ModelSerializer):\n  ```\n\nNote that the Mixin comes before the parent class `ModelSerializer`.\nAlso, if the class defines a custom `create/update()` method you\nmust call `super().create/update()`.",
        "properties": {
          "position": {
            "type": "integer"
          },
          "track": {
            "type": "integer"
          }
        }
      },
      "PatchedPersonAccountUpdate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 128
          },
          "preferences": {
            "$ref": "#/components/schemas/PersonPreferenceUpdate"
          }
        }
      },
      "PatchedPlaylistBulkUpdate": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlaylistReorder"
            }
          }
        }
      },
      "PatchedPlaylistTrackUpdate": {
        "type": "object",
        "description": "Overides the create/update methods for models with Audit Columns.\n\nThis is to be used by the Create/Update Serializers of models w/\naudit columns: created/updated_date, created/updated_person_id, etc.\n\nExample:\n  ```\n  class BankCreateUpdateSerializer(AuditColumnsSerializerMixin,\n                                   serializers.ModelSerializer):\n  ```\n\nNote that the Mixin comes before the parent class `ModelSerializer`.\nAlso, if the class defines a custom `create/update()` method you\nmust call `super().create/update()`.",
        "properties": {
          "position": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        }
      },
      "PatchedRequest_body": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Playlist name"
          }
        }
      },
      "PatchedTracks_to_update": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "title": "List of items",
            "description": "List of objects which includes the \"item_id\" and \"position\".(example: {\"items\": [{\"item_id\": <id>, \"position\": <pos>}, ...]})"
          }
        }
      },
      "PersonAccount": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "add_by": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "add_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "bypass_fraud_service": {
            "type": "boolean"
          },
          "change_by": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "change_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "decline_transactions": {
            "type": "boolean"
          },
          "dj_profile": {
            "$ref": "#/components/schemas/PersonDjProfileNested"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "email_confirmed": {
            "type": "boolean",
            "readOnly": true
          },
          "enabled": {
            "type": "boolean"
          },
          "exclude_purchases_from_charts": {
            "type": "boolean"
          },
          "failed_login_count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 45
          },
          "forgot_password_status": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "maxLength": 45
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "person_id": {
            "type": "integer",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "readOnly": true
          },
          "phone_primary": {
            "type": "string",
            "readOnly": true
          },
          "preferences": {
            "$ref": "#/components/schemas/PersonPreference"
          },
          "register_country_id": {
            "type": "integer",
            "maximum": 32767,
            "minimum": -32768,
            "nullable": true
          },
          "register_ip_address": {
            "type": "string"
          },
          "registration_date": {
            "type": "string",
            "format": "date-time"
          },
          "source_type": {
            "$ref": "#/components/schemas/SourceTypeList"
          },
          "total_orders": {
            "type": "string",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "maxLength": 45
          }
        },
        "required": [
          "add_date",
          "bypass_fraud_service",
          "change_date",
          "decline_transactions",
          "dj_profile",
          "email",
          "email_confirmed",
          "enabled",
          "exclude_purchases_from_charts",
          "failed_login_count",
          "forgot_password_status",
          "id",
          "last_name",
          "name",
          "person_id",
          "phone_number",
          "phone_primary",
          "preferences",
          "register_ip_address",
          "registration_date",
          "source_type",
          "total_orders",
          "username"
        ]
      },
      "PersonAccountUpdate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 128
          },
          "preferences": {
            "$ref": "#/components/schemas/PersonPreferenceUpdate"
          }
        },
        "required": ["email", "preferences"]
      },
      "PersonDjProfileNested": {
        "type": "object",
        "properties": {
          "associated_artist": {
            "type": "string",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "is_indexed": {
            "type": "boolean"
          },
          "image": {
            "$ref": "#/components/schemas/ImageList"
          },
          "facebook_comments_enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "genres": {
            "type": "string",
            "readOnly": true
          },
          "person": {
            "type": "string",
            "format": "uri"
          },
          "slug": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "soundcloud_id": {
            "type": "string",
            "nullable": true,
            "maxLength": 32
          },
          "soundcloud_mode": {
            "type": "boolean"
          }
        },
        "required": [
          "associated_artist",
          "enabled",
          "genres",
          "id",
          "image",
          "is_indexed",
          "person",
          "soundcloud_mode"
        ]
      },
      "PersonPreference": {
        "type": "object",
        "properties": {
          "audio_format_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "default_cart_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "language": {
            "type": "string",
            "maxLength": 8
          },
          "person": {
            "type": "integer"
          },
          "in_app_message_opt_out": {
            "nullable": true
          },
          "streaming_audio_format_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "filename_convention": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "mobile_push_notification_is_enabled": {
            "type": "boolean"
          },
          "mobile_push_notification_settings": {
            "nullable": true
          }
        },
        "required": ["person"]
      },
      "PersonPreferenceUpdate": {
        "type": "object",
        "description": "Overides the create/update methods for models with Audit Columns.\n\nThis is to be used by the Create/Update Serializers of models w/\naudit columns: created/updated_date, created/updated_person_id, etc.\n\nExample:\n  ```\n  class BankCreateUpdateSerializer(AuditColumnsSerializerMixin,\n                                   serializers.ModelSerializer):\n  ```\n\nNote that the Mixin comes before the parent class `ModelSerializer`.\nAlso, if the class defines a custom `create/update()` method you\nmust call `super().create/update()`.",
        "properties": {
          "audio_format_id": {
            "type": "integer",
            "default": 1
          },
          "default_cart_name": {
            "type": "string",
            "maxLength": 50
          },
          "language": {
            "type": "string",
            "default": "en-US",
            "maxLength": 8
          },
          "in_app_message_opt_out": {
            "nullable": true
          },
          "streaming_audio_format_id": {
            "type": "integer"
          },
          "filename_convention": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "mobile_push_notification_is_enabled": {
            "type": "boolean"
          },
          "mobile_push_notification_settings": {
            "nullable": true
          }
        }
      },
      "Playlist": {
        "type": "object",
        "description": "Overides the create/update methods for models with Audit Columns.\n\nThis is to be used by the Create/Update Serializers of models w/\naudit columns: created/updated_date, created/updated_person_id, etc.\n\nExample:\n  ```\n  class BankCreateUpdateSerializer(AuditColumnsSerializerMixin,\n                                   serializers.ModelSerializer):\n  ```\n\nNote that the Mixin comes before the parent class `ModelSerializer`.\nAlso, if the class defines a custom `create/update()` method you\nmust call `super().create/update()`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "type": {
            "type": "integer"
          },
          "is_public": {
            "type": "boolean"
          }
        },
        "required": ["created_date", "id", "name", "type", "updated_date"]
      },
      "PlaylistBulkUpdate": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlaylistReorder"
            }
          }
        },
        "required": ["items"]
      },
      "PlaylistProxy": {
        "type": "object",
        "description": "Overides the create/update methods for models with Audit Columns.\n\nThis is to be used by the Create/Update Serializers of models w/\naudit columns: created/updated_date, created/updated_person_id, etc.\n\nExample:\n  ```\n  class BankCreateUpdateSerializer(AuditColumnsSerializerMixin,\n                                   serializers.ModelSerializer):\n  ```\n\nNote that the Mixin comes before the parent class `ModelSerializer`.\nAlso, if the class defines a custom `create/update()` method you\nmust call `super().create/update()`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "track_count": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "$ref": "#/components/schemas/PlaylistType"
          },
          "length_ms": {
            "type": "string",
            "readOnly": true
          },
          "bpm_range": {
            "type": "string",
            "readOnly": true
          },
          "genres": {
            "type": "string",
            "readOnly": true
          },
          "keys": {
            "type": "string",
            "readOnly": true
          },
          "release_images": {
            "type": "string",
            "readOnly": true
          },
          "is_public": {
            "type": "boolean"
          },
          "is_owner": {
            "type": "string",
            "readOnly": true
          },
          "followers": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "bpm_range",
          "created_date",
          "followers",
          "genres",
          "id",
          "is_owner",
          "keys",
          "length_ms",
          "name",
          "release_images",
          "track_count",
          "type",
          "updated_date"
        ]
      },
      "PlaylistReorder": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "integer"
          },
          "position": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          }
        },
        "required": ["item_id"]
      },
      "PlaylistTrack": {
        "type": "object",
        "description": "Overides the create/update methods for models with Audit Columns.\n\nThis is to be used by the Create/Update Serializers of models w/\naudit columns: created/updated_date, created/updated_person_id, etc.\n\nExample:\n  ```\n  class BankCreateUpdateSerializer(AuditColumnsSerializerMixin,\n                                   serializers.ModelSerializer):\n  ```\n\nNote that the Mixin comes before the parent class `ModelSerializer`.\nAlso, if the class defines a custom `create/update()` method you\nmust call `super().create/update()`.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "track": {
            "$ref": "#/components/schemas/TrackList"
          },
          "tombstoned": {
            "type": "boolean"
          }
        },
        "required": ["id", "position", "track"]
      },
      "PlaylistTrackCreate": {
        "type": "object",
        "description": "Overides the create/update methods for models with Audit Columns.\n\nThis is to be used by the Create/Update Serializers of models w/\naudit columns: created/updated_date, created/updated_person_id, etc.\n\nExample:\n  ```\n  class BankCreateUpdateSerializer(AuditColumnsSerializerMixin,\n                                   serializers.ModelSerializer):\n  ```\n\nNote that the Mixin comes before the parent class `ModelSerializer`.\nAlso, if the class defines a custom `create/update()` method you\nmust call `super().create/update()`.",
        "properties": {
          "track_id": {
            "type": "integer"
          }
        },
        "required": ["track_id"]
      },
      "PlaylistTrackId": {
        "type": "object",
        "description": "Representational serializer for creates/updates.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "track_id": {
            "type": "integer"
          },
          "track_available": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": ["id", "position", "track_available", "track_id"]
      },
      "PlaylistTrackUpdate": {
        "type": "object",
        "description": "Overides the create/update methods for models with Audit Columns.\n\nThis is to be used by the Create/Update Serializers of models w/\naudit columns: created/updated_date, created/updated_person_id, etc.\n\nExample:\n  ```\n  class BankCreateUpdateSerializer(AuditColumnsSerializerMixin,\n                                   serializers.ModelSerializer):\n  ```\n\nNote that the Mixin comes before the parent class `ModelSerializer`.\nAlso, if the class defines a custom `create/update()` method you\nmust call `super().create/update()`.",
        "properties": {
          "position": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          }
        },
        "required": ["position"]
      },
      "PlaylistType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 64
          }
        },
        "required": ["id", "name"]
      },
      "Playlist_metadata_response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Playlist ID."
          },
          "name": {
            "type": "string",
            "description": "Name of the playlist."
          },
          "created_date": {
            "type": "string",
            "description": "Date playlist was created."
          },
          "updated_date": {
            "type": "string",
            "description": "Date playlist was last updated."
          },
          "track_count": {
            "type": "integer",
            "description": "The number of track in the playlist."
          },
          "type": {
            "$ref": "#/components/schemas/Whether_the_playlist_is_a_user_or_curated_playlist."
          },
          "length_ms": {
            "type": "integer",
            "description": "The length of the playlist in milliseconds."
          },
          "bpm_range": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "A [min, max] range of the playlist. Items are integers."
          },
          "genres": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of genre names that are in this playlist."
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of keys that are in this playlist."
          },
          "release_images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of urls to the first four release images in the playlist. If the track does not have a release image, null is returned. If the playlist has less than four tracks in it, this array will not be full."
          },
          "is_public": {
            "type": "boolean",
            "description": "A boolean value that is true if playlist is public or false if private"
          },
          "is_owner": {
            "type": "boolean",
            "description": "A boolean value that represents whether the requesting user owns the playlist"
          }
        },
        "required": [
          "bpm_range",
          "created_date",
          "genres",
          "id",
          "is_owner",
          "is_public",
          "keys",
          "length_ms",
          "name",
          "release_images",
          "track_count",
          "type",
          "updated_date"
        ]
      },
      "Post_response": {
        "type": "object",
        "properties": {
          "items": {
            "type": "object",
            "additionalProperties": {},
            "description": "Info on newly added tracks. The new item_id will be here. Includes (id, position, track_id, track_available)"
          },
          "playlist": {
            "type": "object",
            "additionalProperties": {},
            "title": "Playlist metadata",
            "description": "Updated metadata about the playlist. Includes (id, name, created_date, updated_date, track_count, type, length_ms, bpm_range, genres, keys, release_images, is_public, is_owner, followers)"
          }
        },
        "required": ["items"]
      },
      "PublishStatusEnum": {
        "enum": ["hidden", "published", "labelRemoved", "takedown"],
        "type": "string",
        "description": "* `hidden` - hidden\n* `published` - published\n* `labelRemoved` - labelRemoved\n* `takedown` - takedown"
      },
      "Release": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "artists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "exclusive": {
            "type": "boolean"
          },
          "label": {
            "$ref": "#/components/schemas/LabelNested"
          },
          "price": {
            "type": "object",
            "additionalProperties": {}
          },
          "pre_order": {
            "type": "boolean"
          },
          "remixers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "tracks": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "readOnly": true
          },
          "track_count": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "$ref": "#/components/schemas/ReleaseTypesDetail"
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "add_by": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "catalog_number": {
            "type": "string",
            "nullable": true,
            "maxLength": 45
          },
          "change_by": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "change_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "ddex_release_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "desc": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "encoded_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exclusive_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "grid": {
            "type": "string",
            "nullable": true,
            "maxLength": 18
          },
          "is_available_for_streaming": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "maxLength": 230
          },
          "new_release_date": {
            "type": "string",
            "format": "date"
          },
          "override_price": {
            "type": "string",
            "format": "decimal",
            "pattern": "^-?\\d{0,6}(?:\\.\\d{0,2})?$",
            "nullable": true
          },
          "pre_order_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "price_override_firm": {
            "type": "boolean",
            "nullable": true
          },
          "publish_date": {
            "type": "string",
            "format": "date"
          },
          "streaming_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "was_ever_exclusive": {
            "type": "boolean"
          }
        },
        "required": [
          "artists",
          "change_date",
          "created",
          "created_date",
          "exclusive",
          "image",
          "is_available_for_streaming",
          "label",
          "name",
          "new_release_date",
          "pre_order",
          "price",
          "remixers",
          "track_count",
          "tracks",
          "type",
          "updated",
          "updated_date",
          "url"
        ]
      },
      "ReleaseDetail": {
        "type": "object",
        "description": "A Mixin for dynicmally including fields based on a user's scopes.\n\nIf this Mixin is used an attr `include_by_scope` should be included\non the serializer that subclasses this mixin. This attr should be\na dict mapping field -> list of allowed scopes.\n\nFor example, the following definition would allow the field named\n`dynamic_field` to be visible by admin user in baseware or a\nmarketing user in control.\n\n```\nclass SerializerClass(ModelSerializer):\n    ...\n\n    include_by_scope = {\n        'dynamic_field' = [\n            ['app:baseware', 'staff:admin'],\n            ['app:control', 'staff:marketing'],\n        ]\n    }\n```",
        "properties": {
          "artists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "bpm_range": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "catalog_number": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "desc": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "encoded_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "exclusive": {
            "type": "boolean"
          },
          "grid": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "is_available_for_streaming": {
            "type": "boolean",
            "readOnly": true
          },
          "label": {
            "$ref": "#/components/schemas/LabelNested"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "new_release_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "override_price": {
            "type": "string",
            "format": "decimal",
            "pattern": "^-?\\d{0,6}(?:\\.\\d{0,2})?$",
            "readOnly": true,
            "nullable": true
          },
          "pre_order": {
            "type": "boolean"
          },
          "pre_order_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "price": {
            "type": "object",
            "additionalProperties": {}
          },
          "price_override_firm": {
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "publish_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "remixers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "tracks": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "readOnly": true
          },
          "track_count": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "$ref": "#/components/schemas/ReleaseTypesDetail"
          },
          "upc": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "is_hype": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "artists",
          "bpm_range",
          "catalog_number",
          "desc",
          "enabled",
          "encoded_date",
          "exclusive",
          "grid",
          "id",
          "image",
          "is_available_for_streaming",
          "is_hype",
          "label",
          "name",
          "new_release_date",
          "override_price",
          "pre_order",
          "pre_order_date",
          "price",
          "price_override_firm",
          "publish_date",
          "remixers",
          "slug",
          "track_count",
          "tracks",
          "type",
          "upc",
          "updated"
        ]
      },
      "ReleaseList": {
        "type": "object",
        "description": "A Mixin for dynicmally including fields based on a user's scopes.\n\nIf this Mixin is used an attr `include_by_scope` should be included\non the serializer that subclasses this mixin. This attr should be\na dict mapping field -> list of allowed scopes.\n\nFor example, the following definition would allow the field named\n`dynamic_field` to be visible by admin user in baseware or a\nmarketing user in control.\n\n```\nclass SerializerClass(ModelSerializer):\n    ...\n\n    include_by_scope = {\n        'dynamic_field' = [\n            ['app:baseware', 'staff:admin'],\n            ['app:control', 'staff:marketing'],\n        ]\n    }\n```",
        "properties": {
          "artists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "bpm_range": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "catalog_number": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "desc": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "encoded_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "exclusive": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "label": {
            "$ref": "#/components/schemas/LabelNested"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "new_release_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "override_price": {
            "type": "string",
            "format": "decimal",
            "pattern": "^-?\\d{0,6}(?:\\.\\d{0,2})?$",
            "readOnly": true,
            "nullable": true
          },
          "pre_order": {
            "type": "boolean"
          },
          "pre_order_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "price": {
            "type": "object",
            "additionalProperties": {}
          },
          "price_override_firm": {
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "publish_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "remixers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "track_count": {
            "type": "integer",
            "readOnly": true
          },
          "upc": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "is_hype": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "artists",
          "bpm_range",
          "catalog_number",
          "desc",
          "enabled",
          "encoded_date",
          "exclusive",
          "id",
          "image",
          "is_hype",
          "label",
          "name",
          "new_release_date",
          "override_price",
          "pre_order",
          "pre_order_date",
          "price",
          "price_override_firm",
          "publish_date",
          "remixers",
          "slug",
          "track_count",
          "upc",
          "updated",
          "url"
        ]
      },
      "ReleaseTrackId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "pre_order": {
            "type": "boolean",
            "readOnly": true
          },
          "is_available_for_streaming": {
            "type": "boolean"
          }
        },
        "required": ["id", "is_available_for_streaming", "pre_order"]
      },
      "ReleaseTypesDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["id", "name"]
      },
      "Request_body": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Playlist name"
          }
        },
        "required": ["name"]
      },
      "SaleTypeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["id", "name", "url"]
      },
      "SourceTypeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["id", "name", "url"]
      },
      "SubGenre": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "enabled": {
            "type": "boolean"
          },
          "genre": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "created_date",
          "enabled",
          "genre",
          "name",
          "updated_date",
          "url"
        ]
      },
      "SubGenreDetail": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "genre": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["enabled", "genre", "id", "name", "slug", "url"]
      },
      "SubGenreList": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": ["enabled", "id", "name", "slug", "url"]
      },
      "SubGenreNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": ["enabled", "id", "name", "slug", "url"]
      },
      "SupplierNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["id", "name", "url"]
      },
      "TempAccount": {
        "type": "object",
        "properties": {
          "user": {
            "type": "integer"
          },
          "item_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "item_type_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "username": {
            "type": "string",
            "maxLength": 64
          },
          "temp_password": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "account_activated": {
            "type": "boolean"
          }
        },
        "required": [
          "account_activated",
          "item_id",
          "item_type_id",
          "user",
          "username"
        ]
      },
      "Track": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "artists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "catalog_number": {
            "type": "string"
          },
          "current_status": {
            "$ref": "#/components/schemas/CurrentStatusList"
          },
          "exclusive": {
            "type": "boolean"
          },
          "exclusive_period": {
            "$ref": "#/components/schemas/ExclusivePeriodNested"
          },
          "free_downloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackFreeDownload"
            }
          },
          "genre": {
            "$ref": "#/components/schemas/GenreNested"
          },
          "label": {
            "$ref": "#/components/schemas/LabelNested"
          },
          "key": {
            "$ref": "#/components/schemas/KeyList"
          },
          "publishers": {
            "type": "string",
            "readOnly": true
          },
          "pre_order": {
            "type": "boolean"
          },
          "price": {
            "type": "object",
            "additionalProperties": {}
          },
          "release": {
            "type": "string",
            "readOnly": true
          },
          "remixers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "sale_type": {
            "$ref": "#/components/schemas/SaleTypeList"
          },
          "sub_genre": {
            "$ref": "#/components/schemas/SubGenreNested"
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "is_hype": {
            "type": "boolean"
          },
          "available_worldwide": {
            "type": "boolean"
          },
          "bpm": {
            "type": "integer",
            "maximum": 32767,
            "minimum": -32768,
            "nullable": true
          },
          "change_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "desc": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "encode_status": {
            "$ref": "#/components/schemas/EncodeStatusEnum"
          },
          "encoded_date": {
            "type": "string",
            "format": "date-time"
          },
          "exclusive_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "_exclusive_period_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "title": " exclusive period id"
          },
          "guid": {
            "type": "string",
            "nullable": true,
            "maxLength": 36
          },
          "is_available_for_streaming": {
            "type": "boolean"
          },
          "is_classic": {
            "type": "boolean"
          },
          "isrc": {
            "type": "string",
            "nullable": true,
            "maxLength": 12
          },
          "label_track_identifier": {
            "type": "string",
            "nullable": true,
            "maxLength": 32
          },
          "length_ms": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "lifetime_exclusive": {
            "type": "boolean"
          },
          "mix_name": {
            "type": "string",
            "maxLength": 250
          },
          "name": {
            "type": "string",
            "maxLength": 250
          },
          "new_release_date": {
            "type": "string",
            "format": "date"
          },
          "number": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "pre_order_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "publish_date": {
            "type": "string",
            "format": "date"
          },
          "publish_status": {
            "$ref": "#/components/schemas/PublishStatusEnum"
          },
          "streaming_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "was_ever_exclusive": {
            "type": "boolean"
          },
          "audio_format": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "required": [
          "artists",
          "available_worldwide",
          "catalog_number",
          "created_date",
          "current_status",
          "encoded_date",
          "exclusive",
          "exclusive_period",
          "free_downloads",
          "genre",
          "image",
          "is_available_for_streaming",
          "key",
          "label",
          "name",
          "new_release_date",
          "number",
          "pre_order",
          "price",
          "publish_date",
          "publishers",
          "release",
          "remixers",
          "sale_type",
          "sub_genre",
          "updated_date",
          "url",
          "was_ever_exclusive"
        ]
      },
      "TrackArtist": {
        "type": "object",
        "description": "Serializer for an artist/remixer/bsrc_remixer nested on a track",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          }
        },
        "required": ["id", "image", "name", "slug", "url"]
      },
      "TrackDetail": {
        "type": "object",
        "description": "A Mixin for dynicmally including fields based on a user's scopes.\n\nIf this Mixin is used an attr `include_by_scope` should be included\non the serializer that subclasses this mixin. This attr should be\na dict mapping field -> list of allowed scopes.\n\nFor example, the following definition would allow the field named\n`dynamic_field` to be visible by admin user in baseware or a\nmarketing user in control.\n\n```\nclass SerializerClass(ModelSerializer):\n    ...\n\n    include_by_scope = {\n        'dynamic_field' = [\n            ['app:baseware', 'staff:admin'],\n            ['app:control', 'staff:marketing'],\n        ]\n    }\n```",
        "properties": {
          "artists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "audio_format": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "nullable": true
          },
          "available_worldwide": {
            "type": "boolean",
            "readOnly": true
          },
          "bpm": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "catalog_number": {
            "type": "string"
          },
          "current_status": {
            "$ref": "#/components/schemas/CurrentStatusList"
          },
          "desc": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "encode_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncodeStatusEnum"
              }
            ],
            "readOnly": true
          },
          "encoded_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "exclusive": {
            "type": "boolean"
          },
          "exclusive_period": {
            "$ref": "#/components/schemas/ExclusivePeriodNested"
          },
          "free_downloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackFreeDownload"
            }
          },
          "free_download_start_date": {
            "type": "string",
            "readOnly": true
          },
          "free_download_end_date": {
            "type": "string",
            "readOnly": true
          },
          "genre": {
            "$ref": "#/components/schemas/GenreNested"
          },
          "hidden": {
            "type": "boolean",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "is_available_for_streaming": {
            "type": "boolean",
            "readOnly": true
          },
          "is_classic": {
            "type": "boolean",
            "readOnly": true
          },
          "isrc": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "key": {
            "$ref": "#/components/schemas/KeyList"
          },
          "label_track_identifier": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "length": {
            "type": "string",
            "readOnly": true
          },
          "length_ms": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "mix_name": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "new_release_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "number": {
            "type": "integer",
            "readOnly": true
          },
          "pre_order": {
            "type": "boolean"
          },
          "pre_order_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "price": {
            "type": "object",
            "additionalProperties": {}
          },
          "publish_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "publish_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublishStatusEnum"
              }
            ],
            "readOnly": true
          },
          "release": {
            "type": "string",
            "readOnly": true
          },
          "remixers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "sale_type": {
            "$ref": "#/components/schemas/SaleTypeList"
          },
          "sample_url": {
            "type": "string",
            "readOnly": true
          },
          "sample_start_ms": {
            "type": "integer",
            "readOnly": true
          },
          "sample_end_ms": {
            "type": "integer",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "sub_genre": {
            "$ref": "#/components/schemas/SubGenreNested"
          },
          "territories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "was_ever_exclusive": {
            "type": "boolean",
            "readOnly": true
          },
          "is_hype": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "artists",
          "audio_format",
          "available_worldwide",
          "bpm",
          "catalog_number",
          "current_status",
          "desc",
          "enabled",
          "encode_status",
          "encoded_date",
          "exclusive",
          "exclusive_period",
          "free_download_end_date",
          "free_download_start_date",
          "free_downloads",
          "genre",
          "hidden",
          "id",
          "image",
          "is_available_for_streaming",
          "is_classic",
          "is_hype",
          "isrc",
          "key",
          "label_track_identifier",
          "length",
          "length_ms",
          "mix_name",
          "name",
          "new_release_date",
          "number",
          "pre_order",
          "pre_order_date",
          "price",
          "publish_date",
          "publish_status",
          "release",
          "remixers",
          "sale_type",
          "sample_end_ms",
          "sample_start_ms",
          "sample_url",
          "slug",
          "sub_genre",
          "territories",
          "was_ever_exclusive"
        ]
      },
      "TrackDownloadList": {
        "type": "object",
        "description": "Returns a partial response based on a `fields` query param.\n\nDynamically removes serializer fields.\nThis however, will not add additional fields that do not exist\non the Serializer itself.",
        "properties": {
          "artists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "audio_format": {
            "$ref": "#/components/schemas/AudioFormatNested"
          },
          "bpm": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "genre": {
            "$ref": "#/components/schemas/GenreNested"
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "initial_download": {
            "type": "boolean"
          },
          "is_available_for_streaming": {
            "type": "boolean",
            "readOnly": true
          },
          "key": {
            "$ref": "#/components/schemas/KeyList"
          },
          "length_ms": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "mix_name": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "new_release_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "order_item_download_id": {
            "type": "integer"
          },
          "order_item_download_try_count": {
            "type": "integer"
          },
          "pre_order_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "pre_order": {
            "type": "boolean"
          },
          "price": {
            "type": "object",
            "additionalProperties": {}
          },
          "publish_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "purchase_date": {
            "type": "string",
            "format": "date-time"
          },
          "received_status": {
            "type": "boolean"
          },
          "release": {
            "type": "string",
            "readOnly": true
          },
          "remixers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "sample_url": {
            "type": "string",
            "readOnly": true
          },
          "sample_start_ms": {
            "type": "integer",
            "readOnly": true
          },
          "sample_end_ms": {
            "type": "integer",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "sub_genre": {
            "$ref": "#/components/schemas/SubGenreNested"
          },
          "upgrade_fees": {
            "type": "object",
            "additionalProperties": {}
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "tombstoned": {
            "type": "boolean"
          },
          "is_hype": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "artists",
          "audio_format",
          "bpm",
          "enabled",
          "genre",
          "id",
          "image",
          "initial_download",
          "is_available_for_streaming",
          "is_hype",
          "key",
          "length_ms",
          "mix_name",
          "name",
          "new_release_date",
          "order_item_download_id",
          "order_item_download_try_count",
          "pre_order",
          "pre_order_date",
          "price",
          "publish_date",
          "purchase_date",
          "received_status",
          "release",
          "remixers",
          "sample_end_ms",
          "sample_start_ms",
          "sample_url",
          "slug",
          "sub_genre",
          "upgrade_fees",
          "url"
        ]
      },
      "TrackFreeDownload": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_person_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "track": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": ["created_date", "track", "updated_date", "url"]
      },
      "TrackList": {
        "type": "object",
        "description": "A Mixin for dynicmally including fields based on a user's scopes.\n\nIf this Mixin is used an attr `include_by_scope` should be included\non the serializer that subclasses this mixin. This attr should be\na dict mapping field -> list of allowed scopes.\n\nFor example, the following definition would allow the field named\n`dynamic_field` to be visible by admin user in baseware or a\nmarketing user in control.\n\n```\nclass SerializerClass(ModelSerializer):\n    ...\n\n    include_by_scope = {\n        'dynamic_field' = [\n            ['app:baseware', 'staff:admin'],\n            ['app:control', 'staff:marketing'],\n        ]\n    }\n```",
        "properties": {
          "artists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "publish_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PublishStatusEnum"
              }
            ],
            "readOnly": true
          },
          "available_worldwide": {
            "type": "boolean",
            "readOnly": true
          },
          "bpm": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "catalog_number": {
            "type": "string"
          },
          "current_status": {
            "$ref": "#/components/schemas/CurrentStatusList"
          },
          "encoded_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "exclusive": {
            "type": "boolean"
          },
          "free_downloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackFreeDownload"
            }
          },
          "free_download_start_date": {
            "type": "string",
            "readOnly": true
          },
          "free_download_end_date": {
            "type": "string",
            "readOnly": true
          },
          "genre": {
            "$ref": "#/components/schemas/GenreNested"
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "image": {
            "type": "string",
            "readOnly": true
          },
          "is_available_for_streaming": {
            "type": "boolean",
            "readOnly": true
          },
          "isrc": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "key": {
            "$ref": "#/components/schemas/KeyList"
          },
          "label_track_identifier": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "length": {
            "type": "string",
            "readOnly": true
          },
          "length_ms": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "mix_name": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "new_release_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "pre_order": {
            "type": "boolean"
          },
          "pre_order_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "price": {
            "type": "object",
            "additionalProperties": {}
          },
          "publish_date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "release": {
            "type": "string",
            "readOnly": true
          },
          "remixers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackArtist"
            }
          },
          "sale_type": {
            "$ref": "#/components/schemas/SaleTypeList"
          },
          "sample_url": {
            "type": "string",
            "readOnly": true
          },
          "sample_start_ms": {
            "type": "integer",
            "readOnly": true
          },
          "sample_end_ms": {
            "type": "integer",
            "readOnly": true
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "sub_genre": {
            "$ref": "#/components/schemas/SubGenreNested"
          },
          "tombstoned": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true
          },
          "is_hype": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "artists",
          "available_worldwide",
          "bpm",
          "catalog_number",
          "current_status",
          "encoded_date",
          "exclusive",
          "free_download_end_date",
          "free_download_start_date",
          "free_downloads",
          "genre",
          "id",
          "image",
          "is_available_for_streaming",
          "is_hype",
          "isrc",
          "key",
          "label_track_identifier",
          "length",
          "length_ms",
          "mix_name",
          "name",
          "new_release_date",
          "pre_order",
          "pre_order_date",
          "price",
          "publish_date",
          "publish_status",
          "release",
          "remixers",
          "sale_type",
          "sample_end_ms",
          "sample_start_ms",
          "sample_url",
          "slug",
          "sub_genre",
          "url"
        ]
      },
      "Whether_the_playlist_is_a_user_or_curated_playlist.": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["id", "name"]
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "sessionid"
      },
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/v4/auth/o/authorize/",
            "tokenUrl": "/v4/auth/o/token/",
            "scopes": {
              "app:docs": "I am authorized to authenticate with Beatport Developer Docs",
              "app:control": "I am authorized to authenticate with Beatport Control",
              "app:baseware": "I am authorized to authenticate with Beatport Baseware",
              "app:store": "I am authorized to authenticate with the Beatport Store",
              "app:loadtest": "I am authorized to load test the API",
              "app:pipe": "I am authorized to authenticate with the Beatport Encoding Pipeline (bp-ondemand)",
              "app:ingestion": "I am authorized to authenticate with the Beatsource Ingestion",
              "app:locker": "I am authorized to authenticate with the Beatport Locker",
              "app:djapp": "I am authorized to authenticate with Beatport DJ",
              "app:mobile": "I am authorized to authenticated with Beatport Mobile",
              "app:oauth": "I am authorized to authenticate with an OAuth application",
              "app:microsite": "I am authorized to authenticate with Hype Microsite",
              "app:prostore": "I am authorized to authenticate with the Pro Store",
              "app:external": "I am authorized to authenticate as a third-party application",
              "app:externaltrusted": "I am authorized to authenticate as a trusted third-party application",
              "app:beatportal": "I am authorized to authenticate as Beatportal",
              "app:contentstatusupdater": "I am authorized to authenticate with the Content Status Updater",
              "app:integrations": "I am authorized to authenticate as the salesforce integration services",
              "staff:admin": "I am an Admin user",
              "staff:content_ops": "I am a Content Ops staff member user",
              "staff:curation": "I am a Curation staff member user",
              "staff:marketing": "I am a Marketing staff member user",
              "staff:label_mgmt": "I am a Label Management staff member user",
              "staff:support": "I am a Customer Support staff member user",
              "staff:finance": "I am a Finance staff member user",
              "user:supplier": "I am a Supplier user",
              "user:label": "I am a Label user",
              "user:artist": "I am an Artist user",
              "user:dj": "I am a DJ user",
              "user:btsrc_beta": "I am a Beta Tester for the Beatsource store",
              "user:beatport_beta": "I am a Beta Tester for the Beatport store",
              "user:anon": "I am an anonymous user",
              "catalog:read": "View All Catalog Objects",
              "catalog:write": "Edit All Catalog Objects",
              "curation:read": "View All Curation Objects",
              "curation:write": "Edit All Curation Objects",
              "landing_pages:read": "View All Page Objects",
              "landing_pages:write": "Edit All Page Objects",
              "coupons:read": "View All Coupon Objects",
              "coupons:write": "Edit All Coupon Objects"
            }
          },
          "implicit": {
            "authorizationUrl": "/v4/auth/o/authorize/",
            "scopes": {
              "app:docs": "I am authorized to authenticate with Beatport Developer Docs",
              "app:control": "I am authorized to authenticate with Beatport Control",
              "app:baseware": "I am authorized to authenticate with Beatport Baseware",
              "app:store": "I am authorized to authenticate with the Beatport Store",
              "app:loadtest": "I am authorized to load test the API",
              "app:pipe": "I am authorized to authenticate with the Beatport Encoding Pipeline (bp-ondemand)",
              "app:ingestion": "I am authorized to authenticate with the Beatsource Ingestion",
              "app:locker": "I am authorized to authenticate with the Beatport Locker",
              "app:djapp": "I am authorized to authenticate with Beatport DJ",
              "app:mobile": "I am authorized to authenticated with Beatport Mobile",
              "app:oauth": "I am authorized to authenticate with an OAuth application",
              "app:microsite": "I am authorized to authenticate with Hype Microsite",
              "app:prostore": "I am authorized to authenticate with the Pro Store",
              "app:external": "I am authorized to authenticate as a third-party application",
              "app:externaltrusted": "I am authorized to authenticate as a trusted third-party application",
              "app:beatportal": "I am authorized to authenticate as Beatportal",
              "app:contentstatusupdater": "I am authorized to authenticate with the Content Status Updater",
              "app:integrations": "I am authorized to authenticate as the salesforce integration services",
              "staff:admin": "I am an Admin user",
              "staff:content_ops": "I am a Content Ops staff member user",
              "staff:curation": "I am a Curation staff member user",
              "staff:marketing": "I am a Marketing staff member user",
              "staff:label_mgmt": "I am a Label Management staff member user",
              "staff:support": "I am a Customer Support staff member user",
              "staff:finance": "I am a Finance staff member user",
              "user:supplier": "I am a Supplier user",
              "user:label": "I am a Label user",
              "user:artist": "I am an Artist user",
              "user:dj": "I am a DJ user",
              "user:btsrc_beta": "I am a Beta Tester for the Beatsource store",
              "user:beatport_beta": "I am a Beta Tester for the Beatport store",
              "user:anon": "I am an anonymous user",
              "catalog:read": "View All Catalog Objects",
              "catalog:write": "Edit All Catalog Objects",
              "curation:read": "View All Curation Objects",
              "curation:write": "Edit All Curation Objects",
              "landing_pages:read": "View All Page Objects",
              "landing_pages:write": "Edit All Page Objects",
              "coupons:read": "View All Coupon Objects",
              "coupons:write": "Edit All Coupon Objects"
            }
          },
          "password": {
            "tokenUrl": "/v4/auth/o/token/",
            "scopes": {
              "app:docs": "I am authorized to authenticate with Beatport Developer Docs",
              "app:control": "I am authorized to authenticate with Beatport Control",
              "app:baseware": "I am authorized to authenticate with Beatport Baseware",
              "app:store": "I am authorized to authenticate with the Beatport Store",
              "app:loadtest": "I am authorized to load test the API",
              "app:pipe": "I am authorized to authenticate with the Beatport Encoding Pipeline (bp-ondemand)",
              "app:ingestion": "I am authorized to authenticate with the Beatsource Ingestion",
              "app:locker": "I am authorized to authenticate with the Beatport Locker",
              "app:djapp": "I am authorized to authenticate with Beatport DJ",
              "app:mobile": "I am authorized to authenticated with Beatport Mobile",
              "app:oauth": "I am authorized to authenticate with an OAuth application",
              "app:microsite": "I am authorized to authenticate with Hype Microsite",
              "app:prostore": "I am authorized to authenticate with the Pro Store",
              "app:external": "I am authorized to authenticate as a third-party application",
              "app:externaltrusted": "I am authorized to authenticate as a trusted third-party application",
              "app:beatportal": "I am authorized to authenticate as Beatportal",
              "app:contentstatusupdater": "I am authorized to authenticate with the Content Status Updater",
              "app:integrations": "I am authorized to authenticate as the salesforce integration services",
              "staff:admin": "I am an Admin user",
              "staff:content_ops": "I am a Content Ops staff member user",
              "staff:curation": "I am a Curation staff member user",
              "staff:marketing": "I am a Marketing staff member user",
              "staff:label_mgmt": "I am a Label Management staff member user",
              "staff:support": "I am a Customer Support staff member user",
              "staff:finance": "I am a Finance staff member user",
              "user:supplier": "I am a Supplier user",
              "user:label": "I am a Label user",
              "user:artist": "I am an Artist user",
              "user:dj": "I am a DJ user",
              "user:btsrc_beta": "I am a Beta Tester for the Beatsource store",
              "user:beatport_beta": "I am a Beta Tester for the Beatport store",
              "user:anon": "I am an anonymous user",
              "catalog:read": "View All Catalog Objects",
              "catalog:write": "Edit All Catalog Objects",
              "curation:read": "View All Curation Objects",
              "curation:write": "Edit All Curation Objects",
              "landing_pages:read": "View All Page Objects",
              "landing_pages:write": "Edit All Page Objects",
              "coupons:read": "View All Coupon Objects",
              "coupons:write": "Edit All Coupon Objects"
            }
          }
        }
      }
    }
  }
}
